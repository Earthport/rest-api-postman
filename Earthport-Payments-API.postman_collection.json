{
	"info": {
		"_postman_id": "3f9f1e23-f533-4290-a191-50505cecdcc2",
		"name": "Earthport-Payments-API",
		"description": "This Postman collection contains sample requests for all of Earthport's Payment APIs.\n\nEach resource is split up into separate sub-folders. Each resource also contains samples of exception case requests. i.e. requests which will return various types of validation error.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "exception cases",
					"item": [
						{
							"name": "Get Token Fail: Invalid Client Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2334114-e0f7-4723-ab12-2ee12d2ef1ff",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful 401 Unauthorized Error\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"error_code=invalid_client\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error_code');",
											"    var error_code = jsonData.error_code;",
											"     pm.expect(error_code).to.equal('invalid_client');",
											"",
											"});",
											"",
											"",
											"pm.test(\"error is: Client credentials are invalid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    var error = jsonData.error;",
											"     pm.expect(error).to.equal('Client credentials are invalid');",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ua8BAqcDPo2AvxoJjSxcWFukUPT40MDg",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "Nxu1WxC274rZPjdS1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token Fail: Invalid grant_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaf01671-ecc0-4d49-acd3-7e32d762dc00",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful 400 Bad Request Error\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"error_code=invalid_request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error_code');",
											"    var error_code = jsonData.error_code;",
											"     pm.expect(error_code).to.equal('invalid_request');",
											"",
											"});",
											"",
											"",
											"pm.test(\"error is: Unsupported grant type\", function () {",
											"    var jsonData = pm.response.json();",
											"    var grant_type=pm.request.url.query.get('grant_type').toString();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    var error = jsonData.error;",
											"     pm.expect(error).to.equal('Unsupported grant type : '+grant_type);",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ua8BAqcDPo2AvxoJjSxcWFukUPT40MDg",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "Nxu1WxC274rZPjdS",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host}}/oauth/token?grant_type=password",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45056f4e-f3e9-46c1-bc14-2ebd997bc5a4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response contains access_token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
									"",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/oauth/token?grant_type=client_credentials",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "11421806-dd27-435c-978c-70f976aa8256",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b107957c-8593-49a1-b5c0-6b94e8a92c82",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "S5: GET Payout Meta Bank Account",
			"item": [
				{
					"name": "GET payout/meta",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"getPayoutRequiredDataForCountryCurrency\":{\r\n      \"countryCode\": \"GB\",\r\n      \"currencyCode\": \"GBP\",\r\n      \"beneficiaryIdentityEntityType\": \"individual\",\r\n      \"serviceLevel\": \"standard\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "https://{{host}}/v1/users/3430090148263/bank-accounts/7426832/payments/meta?amount=500&currency=EUR&payerType=user&serviceLevel=standard",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1",
								"users",
								"3430090148263",
								"bank-accounts",
								"7426832",
								"payments",
								"meta"
							],
							"query": [
								{
									"key": "amount",
									"value": "500"
								},
								{
									"key": "currency",
									"value": "EUR"
								},
								{
									"key": "payerType",
									"value": "user"
								},
								{
									"key": "serviceLevel",
									"value": "standard"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "Wrong Mandatory Field Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4fc91a15-8078-4d19-b9fe-9e1446d9e280",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97f95cf5-7f90-4d6b-a647-dacc2cc23d6f",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserIDX\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"Key\": \"NATIONAL_ID_CARD\",\r\n        \"Value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: No Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "551e6808-9f14-4ba5-a90d-5f56def55bd4",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "de0c8c27-edf9-410f-b404-262fa7bb88c7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No legal entity or individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"additionalData\": [\r\n      {\r\n        \"Key\": \"NATIONAL_ID_CARD\",\r\n        \"Value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: Mandatory Field Not Sent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "71317a49-951b-4f60-95e4-c3fb2af7b5e0",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51929099-4add-491c-9a72-79b19b30cefe",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"Key\": \"NATIONAL_ID_CARD\",\r\n        \"Value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Field order changed (identificationNumber and idType) : Fails with SOAP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "15fdc818-4af4-4f46-a22f-8720feb624a5",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "70a37026-ebfa-45e2-b3a6-0d3d79f7acad",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n     \"additionalData\": [\r\n      {\r\n        \"Key\": \"NATIONAL_ID_CARD\",\r\n        \"Value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail : Wrong key in additional data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "08e85961-5e58-46b9-9a9e-f542485c2a5c",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b2c8f2cf-8894-44a8-b13b-57bd23fc076d",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"Key\": \"WRONG_KEY\",\r\n        \"Value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: Blank request data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "31077fcd-f4ec-4417-b52d-0436777ed989",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "69f8e00a-c525-4bf6-9fb9-95690b1d3783",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Success : Optional Field Not sent (address Line 2 &3)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8ee8d866-7f0b-4f6c-baaa-362386757f48",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "64870af5-68e1-4245-b105-ff44f76796d1",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n         \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"Key\": \"NATIONAL_ID_CARD\",\r\n        \"Value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: Both Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f965b070-37f3-45ca-854a-ee24c3f26ef0",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "896a12fa-3d52-4670-b7b1-f257065e251c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both legal entity and individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"Key\": \"NATIONAL_ID_CARD\",\r\n        \"Value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create User : Individual Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d1071fd-98e3-4aa5-8b82-5b0e4950b23d",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "84fde366-5ce6-442a-8663-90c908dfc485",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"Key\": \"NATIONAL_ID_CARD\",\r\n        \"Value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								},
								"description": "AC"
							},
							"response": []
						},
						{
							"name": "Create User : legal Entity Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a9070b1-b15a-457d-91de-e3e9a791d070",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2da99b6-de39-4f5f-94b9-42422cf771a7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"Key\": \"NATIONAL_ID_CARD\",\r\n        \"Value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Beneficiary Bank Accounts",
			"item": [
				{
					"name": "Add beneficiary bank account",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST bank-accounts Fail: no Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "50846533-e568-4e91-a7bd-e9554eee3e86",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "18ccb466-48a1-4308-b13e-d5aad7044fb2",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090151617",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Missing mandatory field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "64c297cd-611b-412e-9862-d4d090f9a8ad",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The unstructured identity data block contains an invalid item');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n     \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090151617",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: additionalData wrong Key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c15f23b-b98b-4944-be29-aca709613543",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"WRONG_KEY\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090151617",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Wrong Mandatory fieldname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bc17cf84-feea-4756-be87-8df3aac1028c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Schema validation failure during JAXB parsing');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNamesX\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090151617",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : unstructuredIdentity Wrong Key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "695681ec-bda0-429b-9bec-85b319d96e40",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "81341010-cdb1-4602-87e2-f10e5c9c292a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The unstructured identity data block contains an invalid item');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"unstructuredIdentity\": [\n        {\n          \"Key\": \"K1\",\n          \"Value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090151617",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : empty Payload",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fa950134-21fa-4825-865e-598a44acc202",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6e1ce9f-2bc3-4ee6-bfb2-6aca3c10b332",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Error parsing request payload');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090151617",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: More than one Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8aeab38b-c6a2-4cdf-aca6-a8a4667638ac",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a6278588-0b79-4c06-b680-6495dcfc323e",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('More than one identity is provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t  \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"unstructuredIdentity\": [\n        {\n          \"Key\": \"K1\",\n          \"Value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090151617",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts: Field order changed (identificationNumber and idType) : Fails with SOAP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "775c4f94-434b-4c56-a1b5-93da61f06264",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant bank ID\", function () {",
													"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    var merchantBankID=jsonData.benBankID.merchantBankID;",
													"    console.log('merchantBankID=='+merchantBankID);",
													"",
													"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
													"});",
													"",
													"",
													"pm.test(\"Response contains correct epUserID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    var jsonData = pm.response.json();",
													"    var epUserID=jsonData.userID.epUserID.toString();",
													"    var epUserID_url=pm.request.url.path[1];",
													"     console.log('epUserID=='+epUserID);",
													"      console.log('epUserID_url=='+epUserID_url);",
													"    ",
													"    pm.expect(epUserID_url).to.eql(epUserID);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains Earthport generated bankID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epBankID = jsonData.benBankID.epBankID;",
													"    ",
													"    console.log('epBankID=='+epBankID);",
													"    ",
													"     //Earthport bank ID is numeric",
													"    var pattern = new RegExp(\"^[0-9]*$\");",
													"    var match = pattern.test(epBankID);",
													"    ",
													"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"identificationNumber\": \"ABC123\",\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090151617",
												"bank-accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "POST bank-accounts: individualIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0f88561-a3fb-4a88-ac74-d434e5551140",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090151617",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts : unstructuredIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfbe0137-6cc0-43b0-8b7a-e3491842723c",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "17196aee-5993-4fe3-8deb-d0f5e8373f89",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"     //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"unstructuredIdentity\": [\n        {\n          \"Key\": \"Name\",\n          \"Value\": \"John Smith\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090151617",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: US/USD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0f88561-a3fb-4a88-ac74-d434e5551140",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"US\",\n          \"postcode\": \"123456\",\n          \"province\": \"AZ\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"US\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"US\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"US\",\n    \"currencyCode\": \"USD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"0210000893\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"abaRoutingNumber\",\n        \"value\": \"081302633\"\n      },\n      {\n        \"key\": \"accountType\",\n        \"value\": \"1\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090151617",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: legalEntityIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f51e36ac-7f29-4de9-a23f-e9cebddd852d",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d28f8cd-e50e-489d-bba6-718a59fdc1e8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n        \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090151617",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: FR/EUR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0f88561-a3fb-4a88-ac74-d434e5551140",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"FR\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"FR\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"FR\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"FR\",\n    \"currencyCode\": \"EUR\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"iban\",\n        \"value\": \"FR7630588600013765749018822\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090151617",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Optional Field Not sent (address Line 2 &3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "989b4df8-eb45-41ce-b3ec-1de95a0c5a66",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"     //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090151617",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: AU/AUD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0f88561-a3fb-4a88-ac74-d434e5551140",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"AU\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"AU\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"AU\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"AU\",\n    \"currencyCode\": \"AUD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"000414001\"\n      },\n      {\n        \"key\": \"bankCode\",\n        \"value\": \"342\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"branchCode\",\n        \"value\": \"307\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090151617",
										"bank-accounts"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Validate beneficiary bank account",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST bank-accounts Fail : empty Payload",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fa950134-21fa-4825-865e-598a44acc202",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6e1ce9f-2bc3-4ee6-bfb2-6aca3c10b332",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Error parsing request payload');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: no Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "50846533-e568-4e91-a7bd-e9554eee3e86",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6effb0af-9e77-4bcf-b959-867d9d88eccd",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No company or individual identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : unstructuredIdentity Wrong Key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "695681ec-bda0-429b-9bec-85b319d96e40",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "81341010-cdb1-4602-87e2-f10e5c9c292a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The unstructured identity data block contains an invalid item');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n    \t\"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n      \"unstructuredIdentity\": [\n        {\n          \"Key\": \"K1\",\n          \"Value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Wrong Mandatory fieldname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bc17cf84-feea-4756-be87-8df3aac1028c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Schema validation failure during JAXB parsing');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNamesX\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: additionalData wrong Key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c05724f-cab0-40d0-a664-7f875659f44d",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('additionalDataKey not found that matches type=\\'WRONG_KEY\\'');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"WRONG_KEY\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : unstructuredIdentity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bfbe0137-6cc0-43b0-8b7a-e3491842723c",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ecd172b-2fa2-4eb8-b0dd-8509997c859a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No company or individual identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"unstructuredIdentity\": [\n        {\n          \"Key\": \"Name\",\n          \"Value\": \"John Smith\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: More than one Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8aeab38b-c6a2-4cdf-aca6-a8a4667638ac",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28b00d62-d694-4f4a-b03d-4475abc3f2ef",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both company and individual identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t  \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"unstructuredIdentity\": [\n        {\n          \"Key\": \"K1\",\n          \"Value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Missing mandatory field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c3d0bf-9b81-4eaa-8ee0-79661b0808ab",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Schema validation failure during JAXB parsing');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n     \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "POST bank-accounts: individualIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "56240dfc-e2c9-494c-b3d9-f616d13a7586",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: US/USD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f3ec1d9-d768-4a20-ba3a-a987c071486b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"US\",\n          \"postcode\": \"123456\",\n          \"province\": \"AZ\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"US\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"US\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"US\",\n    \"currencyCode\": \"USD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"0210000893\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"abaRoutingNumber\",\n        \"value\": \"081302633\"\n      },\n      {\n        \"key\": \"accountType\",\n        \"value\": \"1\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Optional Field Not sent (address Line 2 &3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "873f8b8d-400c-4639-b11a-f615f2b0c94e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Field order changed (identificationNumber and idType) : Fails with SOAP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "76ba0a35-f72f-4f10-b522-792d6f1eef1b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"identificationNumber\": \"ABC123\",\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: FR/EUR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "00de6490-002a-4c52-b2b6-243b05f273f6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"FR\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"FR\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"FR\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"FR\",\n    \"currencyCode\": \"EUR\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"iban\",\n        \"value\": \"FR7630588600013765749018822\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: US/USD Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f3ec1d9-d768-4a20-ba3a-a987c071486b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"US\",\n          \"postcode\": \"123456\",\n          \"province\": \"AZ\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"US\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"US\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"US\",\n    \"currencyCode\": \"USD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"0210000893\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"abaRoutingNumber\",\n        \"value\": \"081302633\"\n      },\n      {\n        \"key\": \"accountType\",\n        \"value\": \"1\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: legalEntityIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f51e36ac-7f29-4de9-a23f-e9cebddd852d",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "625a1b21-48e9-41bf-b40f-12d317f70116",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n        \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: AU/AUD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "beaf8888-0541-4333-9d27-493e0605f2c9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"AU\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"AU\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"AU\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"AU\",\n    \"currencyCode\": \"AUD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"000414001\"\n      },\n      {\n        \"key\": \"bankCode\",\n        \"value\": \"342\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"branchCode\",\n        \"value\": \"307\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1105a8a9-cd53-4bee-8458-0465405893d6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ccb4b8b-791a-4b73-897b-82fa52604ffa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Create Payment to pre-registered account",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "Post Payments Fail: wrong requestedFX",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "611b22ba-be18-4588-831e-dc9193b88aff",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"failures\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var failure = jsonData.failures.failure.value;",
													"    ",
													"    console.log('failure=='+failure);",
													"    ",
													"    pm.expect(failure).to.equal('the value is not a member of the enumeration: (\\\"FF\\\"/\\\"FV\\\"/\\\"VF\\\")');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FX\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090148263/bank-accounts/7426832/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090148263",
												"bank-accounts",
												"7426832",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Payments Fail: beneficiary currency wrong",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bbd68792-7c90-4d8d-bbf4-186dad3533c4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Currency of supplied beneficiary amount [EUR] must match that of beneficiary bank account [GBP]');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"EUR\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 123,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090148263/bank-accounts/7426832/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090148263",
												"bank-accounts",
												"7426832",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Payments Fail: wrong requestedFX type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "32a8c510-ca84-4c42-bf45-d0c5a3a508ed",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('The requested FX type FF is not valid for payout only input strategy.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090148263/bank-accounts/7426832/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090148263",
												"bank-accounts",
												"7426832",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Payments Fail: BulkTXTicket vs SingleFXTicket",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6124e9ad-5875-4398-b11f-9673a6cc24e9",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Provision of both payout request amount and beneficiary amount must be accompanied by a BulkTXTicket, not a SingleFXTicket');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 123,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090148263/bank-accounts/7426832/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090148263",
												"bank-accounts",
												"7426832",
												"payments"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Post Payments: GB/GBP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2389dedc-0a68-44aa-a770-679f078d7dad",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t]\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090151617/bank-accounts/7431801/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090151617",
										"bank-accounts",
										"7431801",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: US/USD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "27686871-3211-45d2-8735-9e4b1403ab59",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"USD\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"USD\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"USD\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090148823/bank-accounts/7429306/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090148823",
										"bank-accounts",
										"7429306",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: transactionHold - offsetMinutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "65255ef0-6df9-4835-8c04-5efa9faf2c6d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090148263/bank-accounts/7426832/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090148263",
										"bank-accounts",
										"7426832",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: transactionHold - releaseDateTime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "56787b15-17a6-4878-bbf4-70e6eb2f4022",
										"type": "text/javascript",
										"exec": [
											"",
											"",
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);",
											"",
											"var d = new Date(new Date().getTime()+ 30*60000);",
											"",
											"var datestring = d.getFullYear() +\"-\"+ (\"0\"+(d.getMonth()+1)).slice(-2) +\"-\"+  (\"0\"+d.getDate()).slice(-2)  + \"T\" + (\"0\"+(d.getHours())).slice(-2) + \":\" + (\"0\"+d.getMinutes()).slice(-2)+ \":\" +(\"0\"+d.getSeconds()).slice(-2)+\".000+00:00\" ;",
											"pm.globals.set(\"date_time_1_hour\", datestring);",
											"",
											"console.log('date_time_1_hour=='+datestring);",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "419958e3-8aa0-4fab-bfc8-5c178bf59eff",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"releaseDateTime\": \"{{date_time_1_hour}}\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090148263/bank-accounts/7426832/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090148263",
										"bank-accounts",
										"7426832",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: AU/AUD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3894f424-9142-4cad-a1d5-c80571b29c44",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"AUD\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"AUD\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"AUD\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090148823/bank-accounts/7429308/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090148823",
										"bank-accounts",
										"7429308",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: no beneficiaryAmountInformation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a1da229-87d4-4d4f-861c-0c7c430d9ab5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090148263/bank-accounts/7426832/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090148263",
										"bank-accounts",
										"7426832",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: FR/EUR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fb4fe67-c670-461f-a6a2-7196bb617599",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"EUR\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"EUR\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090148823/bank-accounts/7429307/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090148823",
										"bank-accounts",
										"7429307",
										"payments"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Payment",
					"item": [
						{
							"name": "Create Payment (New User, New Bank Account)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user\":{\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\n  \"accountCurrency\": \"GBP\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"Key\": \"NATIONAL_ID_CARD\",\n        \"Value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n},\n\n\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 11,\n\t\t\"currency\": \"GBP\"\n\t},\n\t\"beneficiaryAmountInformation\": {\n\t\t\"beneficiaryAmount\": {\n\t\t\t\"amount\": 11,\n\t\t\t\"currency\": \"GBP\"\n\t\t},\n\t\t\"payoutCurrency\": \"GBP\"\n\t},\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n\n\n\t\n\t\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment (Existing User, New Bank Account)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user\":{\n  \"userID\": {\"epUserID\": 3430090150959,\"merchantUserID\": \"userID_1530273846030\"},\n  \"accountCurrency\": \"GBP\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"Key\": \"NATIONAL_ID_CARD\",\n        \"Value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n},\n\n\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 11,\n\t\t\"currency\": \"GBP\"\n\t},\n\t\"beneficiaryAmountInformation\": {\n\t\t\"beneficiaryAmount\": {\n\t\t\t\"amount\": 11,\n\t\t\t\"currency\": \"GBP\"\n\t\t},\n\t\t\"payoutCurrency\": \"GBP\"\n\t},\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n\n\n\t\n\t\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment (Existing User, Existing Bank Account)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user\":{\n  \"userID\": {\"epUserID\": 3430090150959,\"merchantUserID\": \"userID_1530273846030\"},\n  \"accountCurrency\": \"GBP\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"Key\": \"NATIONAL_ID_CARD\",\n        \"Value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\": {\"epBankID\": 7430125,\"merchantBankID\": \"bankID_1530273906017\"},\n  \"beneficiaryBankAccount\": {\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"Key\": \"NATIONAL_ID_CARD\",\n          \"Value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }\n},\n\n\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 11,\n\t\t\"currency\": \"GBP\"\n\t},\n\t\"beneficiaryAmountInformation\": {\n\t\t\"beneficiaryAmount\": {\n\t\t\t\"amount\": 11,\n\t\t\t\"currency\": \"GBP\"\n\t\t},\n\t\t\"payoutCurrency\": \"GBP\"\n\t},\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n\n\n\t\n\t\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Payment Meta Data",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET payout/meta Fail: No territory profile (IN-INR)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"getPayoutRequiredDataForCountryCurrency\":{\r\n      \"countryCode\": \"GB\",\r\n      \"currencyCode\": \"GBP\",\r\n      \"beneficiaryIdentityEntityType\": \"individual\",\r\n      \"serviceLevel\": \"standard\"\r\n    }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/payments/meta?countryCode=IN&currencyCode=INR&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"payments",
												"meta"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "IN"
												},
												{
													"key": "currencyCode",
													"value": "INR"
												},
												{
													"key": "beneficiaryIdentityEntityType",
													"value": "individual"
												},
												{
													"key": "serviceLevel",
													"value": "standard"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "GET payout/meta GB-GBP",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"getPayoutRequiredDataForCountryCurrency\":{\r\n      \"countryCode\": \"GB\",\r\n      \"currencyCode\": \"GBP\",\r\n      \"beneficiaryIdentityEntityType\": \"individual\",\r\n      \"serviceLevel\": \"standard\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=GB&currencyCode=GBP&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "GB"
										},
										{
											"key": "currencyCode",
											"value": "GBP"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET payout/meta FR-EUR",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"getPayoutRequiredDataForCountryCurrency\":{\r\n      \"countryCode\": \"GB\",\r\n      \"currencyCode\": \"GBP\",\r\n      \"beneficiaryIdentityEntityType\": \"individual\",\r\n      \"serviceLevel\": \"standard\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=FR&currencyCode=EUR&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET payout/meta US-USD",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"getPayoutRequiredDataForCountryCurrency\":{\r\n      \"countryCode\": \"GB\",\r\n      \"currencyCode\": \"GBP\",\r\n      \"beneficiaryIdentityEntityType\": \"individual\",\r\n      \"serviceLevel\": \"standard\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=US&currencyCode=USD&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "US"
										},
										{
											"key": "currencyCode",
											"value": "USD"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Balances",
			"item": [
				{
					"name": "Get Balances",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Balances Fail: Wrong ManagedMerchantName",
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/balances?managedMerchantName=XYZ",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"balances"
											],
											"query": [
												{
													"key": "managedMerchantName",
													"value": "XYZ"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Balances Fail: Wrong Currency",
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/balances?currency=XYZ",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"balances"
											],
											"query": [
												{
													"key": "currency",
													"value": "XYZ"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get All Currency Balances",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/balances",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get EUR Balances",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/balances?currency=EUR",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									],
									"query": [
										{
											"key": "currency",
											"value": "EUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get USD Balances",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/balances?currency=USD",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									],
									"query": [
										{
											"key": "currency",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get GBP Balances",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/balances?currency=GBP",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									],
									"query": [
										{
											"key": "currency",
											"value": "GBP"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8122913a-330a-4728-969e-9ca211109705",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f0337fe-4ac4-4506-a504-2986db3bf8a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Statements",
			"item": [
				{
					"name": "Get Statements",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Statements Fail: Wrong managedMerchantName",
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/statements?managedMerchantName=test&startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"statements"
											],
											"query": [
												{
													"key": "managedMerchantName",
													"value": "test"
												},
												{
													"key": "startDateTime",
													"value": "2018-01-01T00:00:47Z"
												},
												{
													"key": "endDateTime",
													"value": "2018-10-01T00:00:47Z"
												},
												{
													"key": "currency",
													"value": "GBP"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Statements Fail: Invalid Currency",
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=XYZ&sortOrder=DESC",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"statements"
											],
											"query": [
												{
													"key": "startDateTime",
													"value": "2018-01-01T00:00:47Z"
												},
												{
													"key": "endDateTime",
													"value": "2018-10-01T00:00:47Z"
												},
												{
													"key": "currency",
													"value": "XYZ"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Statements Fail: No currency",
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&sortOrder=DESC",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"statements"
											],
											"query": [
												{
													"key": "startDateTime",
													"value": "2018-01-01T00:00:47Z"
												},
												{
													"key": "endDateTime",
													"value": "2018-10-01T00:00:47Z"
												},
												{
													"key": "currency",
													"value": "GBP",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "GET Statements with no Transactions",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=INR&sortOrder=DESC",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "INR"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements GBP",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC&offset=2&pageSize=10",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "offset",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements USD",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=USD&sortOrder=DESC",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "USD"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements EUR",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=EUR&sortOrder=DESC",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "EUR"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90a7bd94-f3cb-4283-bebf-dd3130215e5a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3fb6bed5-43c3-4e00-b807-2a4cf2880d45",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Quotes",
			"item": [
				{
					"name": "Get Quotes",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Quotes Fail: sellAmount buyCurrency (buyCurrency different than bank account currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03b3c9f6-c273-45e6-b1d9-24f1077c718b",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Buy currency specified must be same as beneficiary bank account currency');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: buyAmount sellCurrency (buyCurrency different than bank account currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01895163-1522-4ee3-ac03-518ad93b251b",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Buy currency specified must be same as beneficiary bank account currency');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"EUR\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: buyAmount buyCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63827a8a-4dd4-4c7d-a20f-44925cefbf18",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount sellCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7d80502-4942-42ad-9fce-865d30a3e465",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount buyCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "006f06ce-7e0d-4af1-b8aa-863c900de675",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail:  buyAmount sellCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c28b9872-1613-4cff-9857-28092eb56869",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "GET Quotes sellAmount buyCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c562ade0-0b32-4fa2-862a-0ba95ec3626b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"EUR\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Quotes buyAmount sellCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b23a3bb-ebee-47fc-9958-99c6cb2ee393",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Get Transaction Details",
					"item": [
						{
							"name": "Transaction Payout",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474988440111",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474988440111"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction UserDeposit",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474988435002",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474988435002"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Journal",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474988435022",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474988435022"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction LiquidityDeposit",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474988435000",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474988435000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Merchant Liquidity Movement",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474988436283",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474988436283"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ce52accf-6d42-49f6-9e45-20fa816ac883",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c48b57f-0244-48a4-8183-3aa710d1f2b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Sample DEPOSIT Notification Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
								"type": "text/javascript",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"pm.globals.set(\"current_time_in_ms\", milliseconds);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns1:notification xmlns=\"http://customer.endpoint.earthport.com/api/merchant/v1/components/notificationBase\"\r\n xmlns:ns1=\"http://customer.endpoint.earthport.com/api/merchant/v3/notification\"\r\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"DepositNotificationType\">\r\n <notificationType>DEPOSIT</notificationType>\r\n <epUserID>3430090154193</epUserID>\r\n <merchantUserIdentity>cptt001</merchantUserIdentity>\r\n <epTransactionID>281474990733677</epTransactionID>\r\n <timestamp>2015-02-03T09:34:43.193+00:00</timestamp>\r\n <managedMerchantIdentity>Contracting Merchant User</managedMerchantIdentity>\r\n <depositAmount>\r\n   <ns2:currency xmlns:ns2=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">EUR</ns2:currency>\r\n   <ns3:amount xmlns:ns3=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">12.50</ns3:amount>\r\n </depositAmount>\r\n <depositedAmount>\r\n   <ns4:currency xmlns:ns4=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">GBP</ns4:currency>\r\n   <ns5:amount xmlns:ns5=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">10.26</ns5:amount>\r\n </depositedAmount>\r\n</ns1:notification>"
						},
						"url": {
							"raw": "http://{{host}}/notification/companies/neosalpha/apps/neosalpha-payment",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"notification",
								"companies",
								"neosalpha",
								"apps",
								"neosalpha-payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sample PAYMENT SENT Notification Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
								"type": "text/javascript",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"pm.globals.set(\"current_time_in_ms\", milliseconds);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<ns1:notification xsi:type=\"PaymentSentNotificationType\" xmlns=\"http://customer.endpoint.earthport.com/api/merchant/v1/components/notificationBase\" xmlns:ns1=\"http://customer.endpoint.earthport.com/api/merchant/v3/notification\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n               <notificationType>PAYMENT_SENT</notificationType>\r\n               <epUserID>3430090240848</epUserID>\r\n               <merchantUserIdentity>1DBWSBQ1EPF78</merchantUserIdentity>\r\n               <epTransactionID>281475041370930</epTransactionID>\r\n               <timestamp>2018-05-25T15:48:58.788+01:00</timestamp>\r\n               <managedMerchantIdentity>Contracting Merchant User</managedMerchantIdentity>\r\n               <payoutTransactionID>\r\n                              <epTransactionID>281475041370930</epTransactionID>                              <merchantTransactionID>IntegrationTest:62537498</merchantTransactionID>\r\n               </payoutTransactionID>\r\n               <payoutRequestAmount>\r\n                              <ns2:currency xmlns:ns2=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">GBP</ns2:currency>\r\n                              <ns3:amount xmlns:ns3=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">145.32</ns3:amount>\r\n               </payoutRequestAmount>\r\n               <epBankID>21068999</epBankID>\r\n</ns1:notification>"
						},
						"url": {
							"raw": "http://{{host}}/notification/companies/actest/apps/actest-system",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"notification",
								"companies",
								"actest",
								"apps",
								"actest-system"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sample REJECTED PAYOUT Notification Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
								"type": "text/javascript",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"pm.globals.set(\"current_time_in_ms\", milliseconds);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<ns1:notification xmlns=\"http://customer.endpoint.earthport.com/api/merchant/v1/components/notificationBase\"\r\n xmlns:ns1=\"http://customer.endpoint.earthport.com/api/merchant/v3/notification\"\r\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"RejectNotificationType\">\r\n <notificationType>REJECTED_PAYOUT</notificationType>\r\n <epUserID>3430090154301</epUserID>\r\n <merchantUserIdentity>119TUOC87NPCK</merchantUserIdentity>\r\n <epTransactionID>281474990733689</epTransactionID>\r\n <timestamp>2015-02-03T18:22:07.211+00:00</timestamp>\r\n <managedMerchantIdentity>Contracting Merchant User</managedMerchantIdentity>\r\n <refundedAmount>\r\n   <ns2:currency xmlns:ns2=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">GBP</ns2:currency>\r\n   <ns3:amount xmlns:ns3=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">100.00</ns3:amount>\r\n </refundedAmount>\r\n <payoutAmount>\r\n   <ns4:currency xmlns:ns4=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">GBP</ns4:currency>\r\n   <ns5:amount xmlns:ns5=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">100.00</ns5:amount>\r\n </payoutAmount>\r\n <payoutTransactionID>\r\n   <epTransactionID>281474990732857</epTransactionID>   <merchantTransactionID>IntegrationTest:11903175</merchantTransactionID>\r\n </payoutTransactionID>\r\n <epBankID>9670429</epBankID>\r\n <reason> Account Address invalid . BE04</reason>\r\n <reasonID>101</reasonID>\r\n</ns1:notification>"
						},
						"url": {
							"raw": "http://{{host}}/notification/companies/actest/apps/actest-system",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"notification",
								"companies",
								"actest",
								"apps",
								"actest-system"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sample REFUND Notification Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
								"type": "text/javascript",
								"exec": [
									"var milliseconds = new Date().getTime();",
									"pm.globals.set(\"current_time_in_ms\", milliseconds);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<ns1:notification xmlns=\"http://customer.endpoint.earthport.com/api/merchant/v1/components/notificationBase\"\r\n xmlns:ns1=\"http://customer.endpoint.earthport.com/api/merchant/v3/notification\"\r\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"ReturnNotificationType\">\r\n <notificationType>REFUND</notificationType>\r\n <epUserID>3430090154193</epUserID>\r\n <merchantUserIdentity>cptt001</merchantUserIdentity>\r\n <epTransactionID>281474990733696</epTransactionID>\r\n <timestamp>2015-02-03T18:35:13.485+00:00</timestamp>\r\n <managedMerchantIdentity>Contracting Merchant User</managedMerchantIdentity>\r\n <refundedAmount>\r\n   <ns2:currency xmlns:ns2=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">EUR</ns2:currency>\r\n   <ns3:amount xmlns:ns3=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">58.32</ns3:amount>\r\n </refundedAmount>\r\n <payoutAmount>\r\n   <ns4:currency xmlns:ns4=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">EUR</ns4:currency>\r\n   <ns5:amount xmlns:ns5=\"http://customer.endpoint.earthport.com/api/merchant/v2/components/core\">60.15</ns5:amount>\r\n </payoutAmount>\r\n <payoutTransactionID>\r\n   <epTransactionID>281474990733691</epTransactionID>\r\n   <merchantTransactionID>ccttfx01g</merchantTransactionID>\r\n </payoutTransactionID>\r\n <epBankID>9670420</epBankID>\r\n <reason> Account Address invalid . BE04</reason>\r\n <reasonID>111</reasonID>\r\n</ns1:notification>"
						},
						"url": {
							"raw": "http://{{host}}/notification/companies/actest/apps/actest-system",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"notification",
								"companies",
								"actest",
								"apps",
								"actest-system"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Apigee Management APIs",
			"item": [
				{
					"name": "Company",
					"item": [
						{
							"name": "Update Company Details",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"neosalpha1\",\r\n  \"displayName\": \"NeosAlpha1\"\r\n}"
								},
								"url": {
									"raw": "https://api.enterprise.apigee.com/v1/organizations/earthport/companies/neosalpha1",
									"protocol": "https",
									"host": [
										"api",
										"enterprise",
										"apigee",
										"com"
									],
									"path": [
										"v1",
										"organizations",
										"earthport",
										"companies",
										"neosalpha1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Company",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"neosalpha\",\r\n  \"displayName\": \"NeosAlpha\"\r\n}"
								},
								"url": {
									"raw": "https://api.enterprise.apigee.com/v1/organizations/earthport/companies/neosalpha1",
									"protocol": "https",
									"host": [
										"api",
										"enterprise",
										"apigee",
										"com"
									],
									"path": [
										"v1",
										"organizations",
										"earthport",
										"companies",
										"neosalpha1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Company",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"neosalpha1\",\r\n  \"displayName\": \"NeosAlpha1\"\r\n}"
								},
								"url": {
									"raw": "https://api.enterprise.apigee.com/v1/organizations/earthport/companies",
									"protocol": "https",
									"host": [
										"api",
										"enterprise",
										"apigee",
										"com"
									],
									"path": [
										"v1",
										"organizations",
										"earthport",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Company Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"neosalpha1\",\r\n  \"displayName\": \"NeosAlpha1\"\r\n}"
								},
								"url": {
									"raw": "https://api.enterprise.apigee.com/v1/organizations/earthport/companies",
									"protocol": "https",
									"host": [
										"api",
										"enterprise",
										"apigee",
										"com"
									],
									"path": [
										"v1",
										"organizations",
										"earthport",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"neosalpha\",\r\n  \"displayName\": \"NeosAlpha\"\r\n}"
								},
								"url": {
									"raw": "https://api.enterprise.apigee.com/v1/organizations/earthport/companies/neosalpha",
									"protocol": "https",
									"host": [
										"api",
										"enterprise",
										"apigee",
										"com"
									],
									"path": [
										"v1",
										"organizations",
										"earthport",
										"companies",
										"neosalpha"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Company App",
					"item": [
						{
							"name": "Get Company App Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"neosalpha\",\r\n  \"displayName\": \"NeosAlpha\"\r\n}"
								},
								"url": {
									"raw": "https://api.enterprise.apigee.com/v1/organizations/earthport/companies/neosalpha/apps/neosalpha-payment1",
									"protocol": "https",
									"host": [
										"api",
										"enterprise",
										"apigee",
										"com"
									],
									"path": [
										"v1",
										"organizations",
										"earthport",
										"companies",
										"neosalpha",
										"apps",
										"neosalpha-payment1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Company App Details",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"attributes\": [\r\n    {\r\n      \"name\": \"DisplayName\",\r\n      \"value\": \"neosalpha-payment1\"\r\n    },\r\n    {\r\n      \"name\": \"webhookURL\",\r\n      \"value\": \"https://earthport-customerintegration.apigee.net/utils/notification\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://api.enterprise.apigee.com/v1/organizations/earthport/companies/neosalpha/apps/neosalpha-payment1",
									"protocol": "https",
									"host": [
										"api",
										"enterprise",
										"apigee",
										"com"
									],
									"path": [
										"v1",
										"organizations",
										"earthport",
										"companies",
										"neosalpha",
										"apps",
										"neosalpha-payment1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Company App",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\":\"neosalpha-payment1\",\r\n  \"attributes\": [\r\n    {\r\n      \"name\": \"DisplayName\",\r\n      \"value\": \"neosalpha-payment1\"\r\n    },\r\n    {\r\n      \"name\": \"webhookURL\",\r\n      \"value\": \"https://earthport-customerintegration.apigee.net/utils/notification\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "https://api.enterprise.apigee.com/v1/organizations/earthport/companies/neosalpha/apps",
									"protocol": "https",
									"host": [
										"api",
										"enterprise",
										"apigee",
										"com"
									],
									"path": [
										"v1",
										"organizations",
										"earthport",
										"companies",
										"neosalpha",
										"apps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Company App",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"neosalpha\",\r\n  \"displayName\": \"NeosAlpha\"\r\n}"
								},
								"url": {
									"raw": "https://api.enterprise.apigee.com/v1/organizations/earthport/companies/neosalpha/apps/neosalpha-payment1",
									"protocol": "https",
									"host": [
										"api",
										"enterprise",
										"apigee",
										"com"
									],
									"path": [
										"v1",
										"organizations",
										"earthport",
										"companies",
										"neosalpha",
										"apps",
										"neosalpha-payment1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "",
						"value": "Febuary2018$",
						"type": "string"
					},
					{
						"key": "username",
						"value": "",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f66f569c-5c97-43af-b896-f525ab7ef2ff",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c2d301f4-11d9-4e2a-8956-975f76ae06e0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b3852332-9c5f-463a-b0d4-74715f7fe6de",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "60058b50-4a67-48b3-b6a6-31359282a70a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}