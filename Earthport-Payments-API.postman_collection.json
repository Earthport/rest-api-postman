{
	"info": {
		"_postman_id": "804a8b65-d6b8-41ba-97fe-1a466003c6b4",
		"name": "Earthport-Github-API",
		"description": "This Postman collection contains sample requests for all of Earthport's Payment APIs.\n\nEach resource is split up into separate sub-folders. Each resource also contains samples of exception case requests. i.e. requests which will return various types of validation error.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "exception cases",
					"item": [
						{
							"name": "Get Token Fail: Invalid Client Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2334114-e0f7-4723-ab12-2ee12d2ef1ff",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful 401 Unauthorized Error\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"error_code=invalid_client\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error_code');",
											"    var error_code = jsonData.error_code;",
											"     pm.expect(error_code).to.equal('invalid_client');",
											"",
											"});",
											"",
											"",
											"pm.test(\"error is: Client credentials are invalid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    var error = jsonData.error;",
											"     pm.expect(error).to.equal('Client credentials are invalid');",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ua8BAqcDPo2AvxoJjSxcWFukUPT40MDg",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "Nxu1WxC274rZPjdS1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token Fail: Invalid grant_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaf01671-ecc0-4d49-acd3-7e32d762dc00",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful 400 Bad Request Error\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"error_code=invalid_request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error_code');",
											"    var error_code = jsonData.error_code;",
											"     pm.expect(error_code).to.equal('invalid_request');",
											"",
											"});",
											"",
											"",
											"pm.test(\"error is: Unsupported grant type\", function () {",
											"    var jsonData = pm.response.json();",
											"    var grant_type=pm.request.url.query.get('grant_type').toString();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    var error = jsonData.error;",
											"     pm.expect(error).to.equal('Unsupported grant type : '+grant_type);",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ua8BAqcDPo2AvxoJjSxcWFukUPT40MDg",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "Nxu1WxC274rZPjdS",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host}}/oauth/token?grant_type=password",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45056f4e-f3e9-46c1-bc14-2ebd997bc5a4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response contains access_token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
									"",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/oauth/token?grant_type=client_credentials",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "11421806-dd27-435c-978c-70f976aa8256",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b107957c-8593-49a1-b5c0-6b94e8a92c82",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "Wrong Mandatory Field Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4fc91a15-8078-4d19-b9fe-9e1446d9e280",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97f95cf5-7f90-4d6b-a647-dacc2cc23d6f",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserIDX\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: No Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "551e6808-9f14-4ba5-a90d-5f56def55bd4",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "de0c8c27-edf9-410f-b404-262fa7bb88c7",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No legal entity or individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: Mandatory Field Not Sent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "71317a49-951b-4f60-95e4-c3fb2af7b5e0",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51929099-4add-491c-9a72-79b19b30cefe",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Field order changed (identificationNumber and idType) : Fails with SOAP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "15fdc818-4af4-4f46-a22f-8720feb624a5",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "70a37026-ebfa-45e2-b3a6-0d3d79f7acad",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n     \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail : Wrong key in additional data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "08e85961-5e58-46b9-9a9e-f542485c2a5c",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b2c8f2cf-8894-44a8-b13b-57bd23fc076d",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"WRONG_KEY\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: Blank request data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "31077fcd-f4ec-4417-b52d-0436777ed989",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "69f8e00a-c525-4bf6-9fb9-95690b1d3783",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Success : Optional Field Not sent (address Line 2 &3)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8ee8d866-7f0b-4f6c-baaa-362386757f48",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "64870af5-68e1-4245-b105-ff44f76796d1",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: Both Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f965b070-37f3-45ca-854a-ee24c3f26ef0",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "896a12fa-3d52-4670-b7b1-f257065e251c",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both legal entity and individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create User : Individual Identity (minimum data)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d1071fd-98e3-4aa5-8b82-5b0e4950b23d",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "84fde366-5ce6-442a-8663-90c908dfc485",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"1 Main Street\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\"\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								},
								"description": "AC"
							},
							"response": []
						},
						{
							"name": "Create User : legal Entity Identity (minimum data)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a9070b1-b15a-457d-91de-e3e9a791d070",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2da99b6-de39-4f5f-94b9-42422cf771a7",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\"\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User : Individual Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d1071fd-98e3-4aa5-8b82-5b0e4950b23d",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "84fde366-5ce6-442a-8663-90c908dfc485",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"2 Main Street\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								},
								"description": "AC"
							},
							"response": []
						},
						{
							"name": "Create User : legal Entity Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a9070b1-b15a-457d-91de-e3e9a791d070",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2da99b6-de39-4f5f-94b9-42422cf771a7",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "PUT Users : Optional Field Not sent (address Line 2 &3)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8ee8d866-7f0b-4f6c-baaa-362386757f48",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "64870af5-68e1-4245-b105-ff44f76796d1",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n         \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users : Field order changed (identificationNumber and idType) : Fails with SOAP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "15fdc818-4af4-4f46-a22f-8720feb624a5",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "70a37026-ebfa-45e2-b3a6-0d3d79f7acad",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n     \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail: Both Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f965b070-37f3-45ca-854a-ee24c3f26ef0",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "896a12fa-3d52-4670-b7b1-f257065e251c",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both legal entity and individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail: No Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "551e6808-9f14-4ba5-a90d-5f56def55bd4",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "de0c8c27-edf9-410f-b404-262fa7bb88c7",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No legal entity or individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail: Mandatory Field Not Sent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "71317a49-951b-4f60-95e4-c3fb2af7b5e0",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51929099-4add-491c-9a72-79b19b30cefe",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail : Wrong Mandatory Field Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4fc91a15-8078-4d19-b9fe-9e1446d9e280",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97f95cf5-7f90-4d6b-a647-dacc2cc23d6f",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail : Wrong key in additional data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "08e85961-5e58-46b9-9a9e-f542485c2a5c",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b2c8f2cf-8894-44a8-b13b-57bd23fc076d",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"WRONG_KEY\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090152208",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090152208"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail: Blank request data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "31077fcd-f4ec-4417-b52d-0436777ed989",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "69f8e00a-c525-4bf6-9fb9-95690b1d3783",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PUT Users : Individual Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d1071fd-98e3-4aa5-8b82-5b0e4950b23d",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "84fde366-5ce6-442a-8663-90c908dfc485",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"Birmingham\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Users : legal Entity Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a9070b1-b15a-457d-91de-e3e9a791d070",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2da99b6-de39-4f5f-94b9-42422cf771a7",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"Birmingham\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Disable User",
					"item": [
						{
							"name": "DISABLE user",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146978",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146978"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get User",
					"item": [
						{
							"name": "GET user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add Deposit Reference",
					"item": [
						{
							"name": "POST Deposit Reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cce95b0-1d88-4152-8ece-4f71b9d10c94",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"depositReference\": \"44ERA1234568\"\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/deposit-references",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"deposit-references"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Validate User",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST Users Fail: No Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "551e6808-9f14-4ba5-a90d-5f56def55bd4",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "de0c8c27-edf9-410f-b404-262fa7bb88c7",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No legal entity or individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail: Mandatory Field Not Sent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "71317a49-951b-4f60-95e4-c3fb2af7b5e0",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51929099-4add-491c-9a72-79b19b30cefe",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail : Wrong key in additional data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "08e85961-5e58-46b9-9a9e-f542485c2a5c",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b2c8f2cf-8894-44a8-b13b-57bd23fc076d",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"WRONG_KEY\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail: Blank request data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "31077fcd-f4ec-4417-b52d-0436777ed989",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "69f8e00a-c525-4bf6-9fb9-95690b1d3783",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail: Both Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f965b070-37f3-45ca-854a-ee24c3f26ef0",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "896a12fa-3d52-4670-b7b1-f257065e251c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both legal entity and individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail : Wrong Mandatory Field Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4fc91a15-8078-4d19-b9fe-9e1446d9e280",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97f95cf5-7f90-4d6b-a647-dacc2cc23d6f",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserIDX\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyNam\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "POST Users : Individual Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d1071fd-98e3-4aa5-8b82-5b0e4950b23d",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "84fde366-5ce6-442a-8663-90c908dfc485",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									],
									"query": [
										{
											"key": "action",
											"value": "validate"
										},
										{
											"key": "beneficiaryCountryCode",
											"value": "GB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Users : legal Entity Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a9070b1-b15a-457d-91de-e3e9a791d070",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2da99b6-de39-4f5f-94b9-42422cf771a7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									],
									"query": [
										{
											"key": "action",
											"value": "validate"
										},
										{
											"key": "beneficiaryCountryCode",
											"value": "GB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Users : Optional Field Not sent (address Line 2 &3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ee8d866-7f0b-4f6c-baaa-362386757f48",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "64870af5-68e1-4245-b105-ff44f76796d1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n         \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									],
									"query": [
										{
											"key": "action",
											"value": "validate"
										},
										{
											"key": "beneficiaryCountryCode",
											"value": "GB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Users : Field order changed (identificationNumber and idType) : Fails with SOAP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "15fdc818-4af4-4f46-a22f-8720feb624a5",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70a37026-ebfa-45e2-b3a6-0d3d79f7acad",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n     \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									],
									"query": [
										{
											"key": "action",
											"value": "validate"
										},
										{
											"key": "beneficiaryCountryCode",
											"value": "GB"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Beneficiary Bank Accounts",
			"item": [
				{
					"name": "Add beneficiary bank account",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST bank-accounts Fail: no Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "50846533-e568-4e91-a7bd-e9554eee3e86",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "18ccb466-48a1-4308-b13e-d5aad7044fb2",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Missing mandatory field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "64c297cd-611b-412e-9862-d4d090f9a8ad",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The unstructured identity data block contains an invalid item');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n     \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: additionalData wrong key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c15f23b-b98b-4944-be29-aca709613543",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"WRONG_KEY\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Wrong Mandatory fieldname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bc17cf84-feea-4756-be87-8df3aac1028c",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Schema validation failure during JAXB parsing');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNamesX\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : unstructuredIdentity Wrong key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "695681ec-bda0-429b-9bec-85b319d96e40",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "81341010-cdb1-4602-87e2-f10e5c9c292a",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The unstructured identity data block contains an invalid item');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"K1\",\n          \"value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : empty Payload",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fa950134-21fa-4825-865e-598a44acc202",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6e1ce9f-2bc3-4ee6-bfb2-6aca3c10b332",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Error parsing request payload');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: More than one Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8aeab38b-c6a2-4cdf-aca6-a8a4667638ac",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a6278588-0b79-4c06-b680-6495dcfc323e",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('More than one identity is provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t  \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"K1\",\n          \"value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "POST bank-accounts: individualIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0f88561-a3fb-4a88-ac74-d434e5551140",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: legalEntityIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f51e36ac-7f29-4de9-a23f-e9cebddd852d",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d28f8cd-e50e-489d-bba6-718a59fdc1e8",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n        \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts : unstructuredIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfbe0137-6cc0-43b0-8b7a-e3491842723c",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "17196aee-5993-4fe3-8deb-d0f5e8373f89",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"     //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"Name\",\n          \"value\": \"John Smith\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: FR/EUR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0f88561-a3fb-4a88-ac74-d434e5551140",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"FR\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"FR\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"FR\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"FR\",\n    \"currencyCode\": \"EUR\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"iban\",\n        \"value\": \"FR7630588600013765749018822\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: US/USD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0f88561-a3fb-4a88-ac74-d434e5551140",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"US\",\n          \"postcode\": \"123456\",\n          \"province\": \"AZ\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"US\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"US\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"US\",\n    \"currencyCode\": \"USD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"0210000893\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"abaRoutingNumber\",\n        \"value\": \"081302633\"\n      },\n      {\n        \"key\": \"accountType\",\n        \"value\": \"1\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: AU/AUD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0f88561-a3fb-4a88-ac74-d434e5551140",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"AU\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"AU\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"AU\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"AU\",\n    \"currencyCode\": \"AUD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"000414001\"\n      },\n      {\n        \"key\": \"bankCode\",\n        \"value\": \"342\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"branchCode\",\n        \"value\": \"307\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Optional Field Not sent (address Line 2 &3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "989b4df8-eb45-41ce-b3ec-1de95a0c5a66",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"     //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Field order changed (identificationNumber and idType) : Fails with SOAP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "775c4f94-434b-4c56-a1b5-93da61f06264",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"     //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"identificationNumber\": \"ABC123\",\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Validate beneficiary bank account",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST bank-accounts Fail : empty Payload",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fa950134-21fa-4825-865e-598a44acc202",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6e1ce9f-2bc3-4ee6-bfb2-6aca3c10b332",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Error parsing request payload');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: no Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "50846533-e568-4e91-a7bd-e9554eee3e86",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6effb0af-9e77-4bcf-b959-867d9d88eccd",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No company or individual identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : unstructuredIdentity Wrong key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "695681ec-bda0-429b-9bec-85b319d96e40",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "81341010-cdb1-4602-87e2-f10e5c9c292a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The unstructured identity data block contains an invalid item');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n    \t\"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"K1\",\n          \"value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Wrong Mandatory fieldname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bc17cf84-feea-4756-be87-8df3aac1028c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Schema validation failure during JAXB parsing');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNamesX\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: additionalData wrong key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c05724f-cab0-40d0-a664-7f875659f44d",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('additionalDatakey not found that matches type=\\'WRONG_KEY\\'');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"WRONG_KEY\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : unstructuredIdentity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bfbe0137-6cc0-43b0-8b7a-e3491842723c",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ecd172b-2fa2-4eb8-b0dd-8509997c859a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No company or individual identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"Name\",\n          \"value\": \"John Smith\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: More than one Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8aeab38b-c6a2-4cdf-aca6-a8a4667638ac",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28b00d62-d694-4f4a-b03d-4475abc3f2ef",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both company and individual identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t  \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"K1\",\n          \"value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Missing mandatory field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c3d0bf-9b81-4eaa-8ee0-79661b0808ab",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Schema validation failure during JAXB parsing');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n     \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "POST bank-accounts: individualIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "56240dfc-e2c9-494c-b3d9-f616d13a7586",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: legalEntityIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f51e36ac-7f29-4de9-a23f-e9cebddd852d",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "625a1b21-48e9-41bf-b40f-12d317f70116",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n        \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: FR/EUR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "00de6490-002a-4c52-b2b6-243b05f273f6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"FR\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"FR\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"FR\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"FR\",\n    \"currencyCode\": \"EUR\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"iban\",\n        \"value\": \"FR7630588600013765749018822\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      }\n    ]\n  }\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: US/USD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f3ec1d9-d768-4a20-ba3a-a987c071486b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"US\",\n          \"postcode\": \"123456\",\n          \"province\": \"AZ\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"US\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"US\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"US\",\n    \"currencyCode\": \"USD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"0210000893\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"abaRoutingNumber\",\n        \"value\": \"081302633\"\n      },\n      {\n        \"key\": \"accountType\",\n        \"value\": \"1\"\n      }\n    ]\n  }\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: AU/AUD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "beaf8888-0541-4333-9d27-493e0605f2c9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"AU\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"AU\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"AU\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"AU\",\n    \"currencyCode\": \"AUD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"000414001\"\n      },\n      {\n        \"key\": \"bankCode\",\n        \"value\": \"342\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"branchCode\",\n        \"value\": \"307\"\n      }\n    ]\n  }\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Optional Field Not sent (address Line 2 &3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "873f8b8d-400c-4639-b11a-f615f2b0c94e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Field order changed (identificationNumber and idType) : Fails with SOAP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a842c840-0c41-4d45-b7d0-9f2df658d584",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "76ba0a35-f72f-4f10-b522-792d6f1eef1b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"identificationNumber\": \"ABC123\",\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1105a8a9-cd53-4bee-8458-0465405893d6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ccb4b8b-791a-4b73-897b-82fa52604ffa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Validate beneficiary bank account with expected settlement date",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST Validate Beneficiary and get expected settlement: Fail (unstructured Identity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cce95b0-1d88-4152-8ece-4f71b9d10c94",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8a3939e8-f846-4740-b486-a512e88c32b7",
												"exec": [
													"var moment = require(\"moment\")\r",
													"\r",
													"pm.environment.set('anticipatedPayoutRequestTime', moment().add(10, 'days').toISOString())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n            \"beneficiaryIdentity\": {\r\n      \"unstructuredIdentity\": [\r\n        {\r\n          \"key\": \"Name\",\r\n          \"value\": \"John Smith\"\r\n        }\r\n      ],\r\n      \"additionalData\": [\r\n        {\r\n          \"key\": \"NATIONAL_ID_CARD\",\r\n          \"value\": \"TT6789CC\"\r\n        }\r\n      ]\r\n    },\r\n            \"description\": \"test\",\r\n            \"countryCode\": \"GB\",\r\n            \"bankAccountDetails\": [\r\n                {\r\n                    \"key\": \"accountName\",\r\n                    \"value\": \"Mr J Doe\"\r\n                },\r\n                {\r\n                    \"key\": \"accountNumber\",\r\n                    \"value\": \"01896660\"\r\n                },\r\n                {\r\n                    \"key\": \"bankName\",\r\n                    \"value\": \"Natwest\"\r\n                },\r\n                {\r\n                    \"key\": \"sortCode\",\r\n                    \"value\": 401118\r\n                }\r\n            ],\r\n        \"anticipatedPayoutRequestTime\": \"{{anticipatedPayoutRequestTime}}\",\r\n        \"payoutRequestCurrency\": \"GBP\",\r\n        \"serviceLevel\": \"standard\",\r\n        \"payerType\": \"user\",\r\n        \"payerIdentity\": {\r\n      \"unstructuredIdentity\": [\r\n        {\r\n          \"key\": \"Name\",\r\n          \"value\": \"John Smith\"\r\n        }\r\n      ],\r\n      \"additionalData\": [\r\n        {\r\n          \"key\": \"NATIONAL_ID_CARD\",\r\n          \"value\": \"TT6789CC\"\r\n        }\r\n      ]\r\n    }\r\n    \r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1//bank-accounts/expected-settlement",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"",
												"bank-accounts",
												"expected-settlement"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "POST Validate Beneficiary and get expected settlement (Individual Identity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cce95b0-1d88-4152-8ece-4f71b9d10c94",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "db75c1f9-a6d7-462d-bd2d-9c14082c442c",
										"exec": [
											"var moment = require(\"moment\")\r",
											"\r",
											"pm.environment.set('anticipatedPayoutRequestTime', moment().add(10, 'days').toISOString())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n            \"beneficiaryIdentity\": {\r\n      \"individualIdentity\": {\r\n        \"name\": {\r\n          \"familyName\": \"Smith\",\r\n          \"givenNames\": \"John\"\r\n        },\r\n        \"address\": {\r\n          \"addressLine1\": \"ABC\",\r\n          \"addressLine2\": \"ABC\",\r\n          \"addressLine3\": \"ABC\",\r\n          \"city\": \"ABC\",\r\n          \"country\": \"GB\",\r\n          \"postcode\": \"EC1A 4HY\",\r\n          \"province\": \"ABC\"\r\n        },\r\n        \"birthInformation\": {\r\n          \"cityOfBirth\": \"ABC\",\r\n          \"countryOfBirth\": \"GB\",\r\n          \"dateOfBirth\": \"2001-01-01\"\r\n        },\r\n        \"identification\": [\r\n          {\r\n            \"idType\": \"Passport\",\r\n            \"identificationCountry\": \"GB\",\r\n            \"identificationNumber\": \"ABC123\",\r\n            \"validFromDate\": \"2001-01-01\",\r\n            \"validToDate\": \"2001-01-01\"\r\n          }\r\n        ]\r\n      },\r\n\t   \"additionalData\": [\r\n        {\r\n          \"key\": \"NATIONAL_ID_CARD\",\r\n          \"value\": \"TT6789CC\"\r\n        }\r\n      ]\r\n    },\r\n            \"description\": \"test\",\r\n            \"countryCode\": \"GB\",\r\n            \"bankAccountDetails\": [\r\n                {\r\n                    \"key\": \"accountName\",\r\n                    \"value\": \"Mr J Doe\"\r\n                },\r\n                {\r\n                    \"key\": \"accountNumber\",\r\n                    \"value\": \"01896660\"\r\n                },\r\n                {\r\n                    \"key\": \"bankName\",\r\n                    \"value\": \"Natwest\"\r\n                },\r\n                {\r\n                    \"key\": \"sortCode\",\r\n                    \"value\": 401118\r\n                }\r\n            ],\r\n        \"anticipatedPayoutRequestTime\": \"{{anticipatedPayoutRequestTime}}\",\r\n        \"payoutRequestCurrency\": \"GBP\",\r\n        \"serviceLevel\": \"standard\",\r\n        \"payerType\": \"user\",\r\n        \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n    \r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1//bank-accounts/expected-settlement",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"",
										"bank-accounts",
										"expected-settlement"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Validate Beneficiary and get expected settlement (Legal Entity Identity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cce95b0-1d88-4152-8ece-4f71b9d10c94",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca5dec40-e012-43b7-b2bb-9c5bd8b54f6e",
										"exec": [
											"var moment = require(\"moment\")\r",
											"\r",
											"pm.environment.set('anticipatedPayoutRequestTime', moment().add(10, 'days').toISOString())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n            \"beneficiaryIdentity\": {\r\n        \"legalEntityIdentity\": {\r\n        \"legalEntityName\": \"XYZ Corp\",\r\n        \"legalEntityRegistration\": {\r\n          \"legalEntityRegistrationCountry\": \"GB\",\r\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n          \"legalEntityRegistrationProvince\": \"ABC\"\r\n        },\r\n        \"address\": {\r\n          \"addressLine1\": \"ABC\",\r\n          \"addressLine2\": \"ABC\",\r\n          \"addressLine3\": \"ABC\",\r\n          \"city\": \"ABC\",\r\n          \"country\": \"GB\",\r\n          \"postcode\": \"EC1A 4HY\",\r\n          \"province\": \"ABC\"\r\n        }\r\n      },\r\n      \"additionalData\": [\r\n        {\r\n          \"key\": \"NATIONAL_ID_CARD\",\r\n          \"value\": \"TT6789CC\"\r\n        }\r\n      ]\r\n    },\r\n            \"description\": \"test\",\r\n            \"countryCode\": \"GB\",\r\n            \"bankAccountDetails\": [\r\n                {\r\n                    \"key\": \"accountName\",\r\n                    \"value\": \"Mr J Doe\"\r\n                },\r\n                {\r\n                    \"key\": \"accountNumber\",\r\n                    \"value\": \"01896660\"\r\n                },\r\n                {\r\n                    \"key\": \"bankName\",\r\n                    \"value\": \"Natwest\"\r\n                },\r\n                {\r\n                    \"key\": \"sortCode\",\r\n                    \"value\": 401118\r\n                }\r\n            ],\r\n        \"anticipatedPayoutRequestTime\": \"{{anticipatedPayoutRequestTime}}\",\r\n        \"payoutRequestCurrency\": \"GBP\",\r\n        \"serviceLevel\": \"standard\",\r\n        \"payerType\": \"user\",\r\n        \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n    \r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1//bank-accounts/expected-settlement",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"",
										"bank-accounts",
										"expected-settlement"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get beneficiary bank account",
					"item": [
						{
							"name": "GET Bank Account",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/bank-accounts/4034215",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"bank-accounts",
										"4034215"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Disable beneficiary bank account",
					"item": [
						{
							"name": "DELETE Bank Account",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/bank-accounts/4034215",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"bank-accounts",
										"4034215"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "List beneficiary bank accounts",
					"item": [
						{
							"name": "GET bank-accounts",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts?",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									],
									"query": [
										{
											"key": "includeDeleted",
											"value": "true",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Create Payment to pre-registered account",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "Post Payments Fail: wrong requestedFX",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "611b22ba-be18-4588-831e-dc9193b88aff",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"failures\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var failure = jsonData.failures.failure.value;",
													"    ",
													"    console.log('failure=='+failure);",
													"    ",
													"    pm.expect(failure).to.equal('the value is not a member of the enumeration: (\\\"FF\\\"/\\\"FV\\\"/\\\"VF\\\")');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FX\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts",
												"4096889",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Payments Fail: beneficiary currency wrong",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bbd68792-7c90-4d8d-bbf4-186dad3533c4",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Currency of supplied beneficiary amount [EUR] must match that of beneficiary bank account [GBP]');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"EUR\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 123,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts",
												"4096889",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Payments Fail: wrong requestedFX type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "32a8c510-ca84-4c42-bf45-d0c5a3a508ed",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('The requested FX type FF is not valid for payout only input strategy.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts",
												"4096889",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Payments Fail: BulkTXTicket vs SingleFXTicket",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6124e9ad-5875-4398-b11f-9673a6cc24e9",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Provision of both payout request amount and beneficiary amount must be accompanied by a BulkTXTicket, not a SingleFXTicket');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 123,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts",
												"4096889",
												"payments"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Post Payments: GB/GBP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2389dedc-0a68-44aa-a770-679f078d7dad",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t]\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: GB/GBP (minimum data)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2389dedc-0a68-44aa-a770-679f078d7dad",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"payerType\": \"user\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\"\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								},
								"description": "This test assumes you have registered a GB/GBP beneficiary bank account with an Earthport bank ID = 4034215"
							},
							"response": []
						},
						{
							"name": "Post Payments: GB/GBP (minimum data & inline FX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2389dedc-0a68-44aa-a770-679f078d7dad",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"payerType\": \"user\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\"\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								},
								"description": "This test assumes you have registered a GB/GBP beneficiary bank account with an Earthport bank ID = 4034215. Not in the sample body that the currency of the payout request amount differs from the beneficiary bank account."
							},
							"response": []
						},
						{
							"name": "Post Payments: US/USD (requires purpose of payment)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "27686871-3211-45d2-8735-9e4b1403ab59",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"USD\"\r\n\t},\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"PURPOSE_OF_PAYMENT\",\r\n\t\t\t\"value\": \"REM\"\r\n\t\t}\r\n\t]\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096892/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096892",
										"payments"
									]
								},
								"description": "This payment contains an example of how to set the purpose of payment."
							},
							"response": []
						},
						{
							"name": "Post Payments: AU/AUD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3894f424-9142-4cad-a1d5-c80571b29c44",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"AUD\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"AUD\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"AUD\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090148823/bank-accounts/7429308/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090148823",
										"bank-accounts",
										"7429308",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: FR/EUR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fb4fe67-c670-461f-a6a2-7196bb617599",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"EUR\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"EUR\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096891/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096891",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: FR/EUR (minimum data)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fb4fe67-c670-461f-a6a2-7196bb617599",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"payerType\": \"user\"\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096891/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096891",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: transactionHold - offsetMinutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "65255ef0-6df9-4835-8c04-5efa9faf2c6d",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: transactionHold - releaseDateTime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "56787b15-17a6-4878-bbf4-70e6eb2f4022",
										"exec": [
											"",
											"",
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);",
											"",
											"var d = new Date(new Date().getTime()+ 30*60000);",
											"",
											"var datestring = d.getFullYear() +\"-\"+ (\"0\"+(d.getMonth()+1)).slice(-2) +\"-\"+  (\"0\"+d.getDate()).slice(-2)  + \"T\" + (\"0\"+(d.getHours())).slice(-2) + \":\" + (\"0\"+d.getMinutes()).slice(-2)+ \":\" +(\"0\"+d.getSeconds()).slice(-2)+\".000+00:00\" ;",
											"pm.globals.set(\"date_time_1_hour\", datestring);",
											"",
											"console.log('date_time_1_hour=='+datestring);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "419958e3-8aa0-4fab-bfc8-5c178bf59eff",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"releaseDateTime\": \"{{date_time_1_hour}}\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: no beneficiaryAmountInformation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45737e76-0dce-44cd-ba7d-234838d184a5",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a1da229-87d4-4d4f-861c-0c7c430d9ab5",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Payment",
					"item": [
						{
							"name": "Create Payment (New User, New Bank Account)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user\":{\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\n  \"accountCurrency\": \"any\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"key\": \"NATIONAL_ID_CARD\",\n        \"value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n\n},\n\n\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 11,\n\t\t\"currency\": \"GBP\"\n\t},\n\t\"beneficiaryAmountInformation\": {\n\t\t\"beneficiaryAmount\": {\n\t\t\t\"amount\": 11,\n\t\t\t\"currency\": \"GBP\"\n\t\t},\n\t\t\"payoutCurrency\": \"GBP\"\n\t},\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment (Existing User, New Bank Account)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user\":{\n  \"userID\": {\"merchantUserID\": \"userID_1538058659086\"},\n  \"accountCurrency\": \"any\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"key\": \"NATIONAL_ID_CARD\",\n        \"value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n\n},\n\n\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 11,\n\t\t\"currency\": \"GBP\"\n\t},\n\t\"beneficiaryAmountInformation\": {\n\t\t\"beneficiaryAmount\": {\n\t\t\t\"amount\": 11,\n\t\t\t\"currency\": \"GBP\"\n\t\t},\n\t\t\"payoutCurrency\": \"GBP\"\n\t},\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment (Existing User, Existing Bank Account)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3dd85370-3e2e-41ea-ad23-527c26fb8aba",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user\":{\n  \"userID\": {\"merchantUserID\": \"userID_1530273846030\"},\n  \"accountCurrency\": \"any\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"key\": \"NATIONAL_ID_CARD\",\n        \"value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\": {\"merchantBankID\": \"bankID_1530273906017\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n\n},\n\n\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 11,\n\t\t\"currency\": \"GBP\"\n\t},\n\t\"beneficiaryAmountInformation\": {\n\t\t\"beneficiaryAmount\": {\n\t\t\t\"amount\": 11,\n\t\t\t\"currency\": \"GBP\"\n\t\t},\n\t\t\"payoutCurrency\": \"GBP\"\n\t},\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Payment Meta Data",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET payout/meta Fail: No territory profile (AU-AUD)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{host}}/v1/payments/meta?countryCode=AU&currencyCode=AUD&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"payments",
												"meta"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "AU"
												},
												{
													"key": "currencyCode",
													"value": "AUD"
												},
												{
													"key": "beneficiaryIdentityEntityType",
													"value": "individual"
												},
												{
													"key": "serviceLevel",
													"value": "standard"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "GET payout/meta GB-GBP",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=GB&currencyCode=GBP&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "GB"
										},
										{
											"key": "currencyCode",
											"value": "GBP"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET payout/meta FR-EUR",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=FR&currencyCode=EUR&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET payout/meta US-USD",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=US&currencyCode=USD&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "US"
										},
										{
											"key": "currencyCode",
											"value": "USD"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET payout/meta IN-INR",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=IN&currencyCode=INR&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "IN"
										},
										{
											"key": "currencyCode",
											"value": "INR"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Payment bank account meta data",
					"item": [
						{
							"name": "GET payout/meta",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/bank-accounts/4034221/payments/meta?amount=500&currency=USD&payerType=user&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"bank-accounts",
										"4034221",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "amount",
											"value": "500"
										},
										{
											"key": "currency",
											"value": "USD"
										},
										{
											"key": "payerType",
											"value": "user"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								},
								"description": "This returns information about valid purpose of payment codes."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Balances",
			"item": [
				{
					"name": "Get Balances",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Balances Fail: Wrong ManagedMerchantName",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/balances?managedMerchantName=XYZ",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"balances"
											],
											"query": [
												{
													"key": "managedMerchantName",
													"value": "XYZ"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Balances Fail: Wrong Currency",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/balances?currency=XYZ",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"balances"
											],
											"query": [
												{
													"key": "currency",
													"value": "XYZ"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get All Currency Balances",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/balances",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get EUR Balances",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/balances?currency=EUR",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									],
									"query": [
										{
											"key": "currency",
											"value": "EUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get USD Balances",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/balances?currency=USD",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									],
									"query": [
										{
											"key": "currency",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get GBP Balances",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/balances?currency=GBP",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									],
									"query": [
										{
											"key": "currency",
											"value": "GBP"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8122913a-330a-4728-969e-9ca211109705",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f0337fe-4ac4-4506-a504-2986db3bf8a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Statements",
			"item": [
				{
					"name": "Get Statements",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Statements Fail: Wrong managedMerchantName",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/statements?managedMerchantName=test&startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"statements"
											],
											"query": [
												{
													"key": "managedMerchantName",
													"value": "test"
												},
												{
													"key": "startDateTime",
													"value": "2018-01-01T00:00:47Z"
												},
												{
													"key": "endDateTime",
													"value": "2018-10-01T00:00:47Z"
												},
												{
													"key": "currency",
													"value": "GBP"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Statements Fail: Invalid Currency",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=XYZ&sortOrder=DESC",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"statements"
											],
											"query": [
												{
													"key": "startDateTime",
													"value": "2018-01-01T00:00:47Z"
												},
												{
													"key": "endDateTime",
													"value": "2018-10-01T00:00:47Z"
												},
												{
													"key": "currency",
													"value": "XYZ"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Statements Fail: No currency",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&sortOrder=DESC",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"statements"
											],
											"query": [
												{
													"key": "startDateTime",
													"value": "2018-01-01T00:00:47Z"
												},
												{
													"key": "endDateTime",
													"value": "2018-10-01T00:00:47Z"
												},
												{
													"key": "currency",
													"value": "GBP",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "GET Statements with no Transactions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=INR&sortOrder=DESC",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "INR"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements GBP",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC&offset=2&pageSize=10",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "offset",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements GBP with Pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC&offset=2&pageSize=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "offset",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements USD",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=USD&sortOrder=DESC",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "USD"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements EUR",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=EUR&sortOrder=DESC",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "EUR"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements GBP with Pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC&offset=2&pageSize=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "offset",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90a7bd94-f3cb-4283-bebf-dd3130215e5a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3fb6bed5-43c3-4e00-b807-2a4cf2880d45",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Quotes",
			"item": [
				{
					"name": "Get Indicative Quotes",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Quotes Fail: buyAmount buyCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63827a8a-4dd4-4c7d-a20f-44925cefbf18",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes/indicative",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes",
												"indicative"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount sellCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7d80502-4942-42ad-9fce-865d30a3e465",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes/indicative",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes",
												"indicative"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail:  buyAmount sellCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c28b9872-1613-4cff-9857-28092eb56869",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes/indicative",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes",
												"indicative"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount buyCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "006f06ce-7e0d-4af1-b8aa-863c900de675",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes/indicative",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes",
												"indicative"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "GET Quotes sellAmount buyCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c562ade0-0b32-4fa2-862a-0ba95ec3626b",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"EUR\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/indicative",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"indicative"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Quotes buyAmount sellCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b23a3bb-ebee-47fc-9958-99c6cb2ee393",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/indicative",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"indicative"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Quotes",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Quotes Fail: buyAmount buyCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63827a8a-4dd4-4c7d-a20f-44925cefbf18",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount sellCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7d80502-4942-42ad-9fce-865d30a3e465",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail:  buyAmount sellCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c28b9872-1613-4cff-9857-28092eb56869",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount buyCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "006f06ce-7e0d-4af1-b8aa-863c900de675",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: buyAmount sellCurrency (buyCurrency different than bank account currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01895163-1522-4ee3-ac03-518ad93b251b",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Buy currency specified must be same as beneficiary bank account currency');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"EUR\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount buyCurrency (buyCurrency different than bank account currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03b3c9f6-c273-45e6-b1d9-24f1077c718b",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Buy currency specified must be same as beneficiary bank account currency');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "GET Quotes sellAmount buyCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c562ade0-0b32-4fa2-862a-0ba95ec3626b",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"EUR\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/bank-accounts/4034215/quotes",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"bank-accounts",
										"4034215",
										"quotes"
									],
									"query": [
										{
											"key": "idType",
											"value": "merchant",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Quotes buyAmount sellCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b23a3bb-ebee-47fc-9958-99c6cb2ee393",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\"\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/bank-accounts/4034215/quotes",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"bank-accounts",
										"4034215",
										"quotes"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Bulk Quotes",
					"item": [
						{
							"name": "GET bulkQuotes Single",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c562ade0-0b32-4fa2-862a-0ba95ec3626b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"sellCurrency\":\"EUR\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n}\r\n]"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/bulk",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET bulkQuotes Multiple",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c562ade0-0b32-4fa2-862a-0ba95ec3626b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"sellCurrency\":\"EUR\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n},\r\n{\r\n\"sellCurrency\":\"USD\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n},\r\n{\r\n\"sellCurrency\":\"AUD\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n}\r\n]"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/bulk",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET bulkQuotes same currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c562ade0-0b32-4fa2-862a-0ba95ec3626b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"sellCurrency\":\"GBP\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n}\r\n]"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/bulk",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET bulkQuotes Fail: Wrong country-currency combination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c562ade0-0b32-4fa2-862a-0ba95ec3626b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"sellCurrency\":\"EUR\",\r\n\"buyCountry\":\"FR\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n}\r\n]"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/bulk",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"bulk"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4a103140-b744-4777-bdeb-6e22459e1a2e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3917e946-1d98-43c0-8daa-b3576205e009",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Get Transaction Details",
					"item": [
						{
							"name": "Transaction Payout",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984607095",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984607095"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Returned Payout",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984546394",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984546394"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Refund",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984548632",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984548632"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction UserDeposit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984545951",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984545951"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Journal",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984607202",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984607202"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction LiquidityDeposit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984548614",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984548614"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Merchant Liquidity Movement",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984548618",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984548618"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ce52accf-6d42-49f6-9e45-20fa816ac883",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c48b57f-0244-48a4-8183-3aa710d1f2b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Cancel a transaction",
					"item": [
						{
							"name": "CANCEL Transaction",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474988434819?merchantCancellationReqID=12345",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474988434819"
									],
									"query": [
										{
											"key": "merchantCancellationReqID",
											"value": "12345"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search transactions",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "SEARCH Transaction Fail: Unknown managedMerchantName",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/transactions?managedMerchantName=123&currency=GBP&startDateTime=2018-01-01T07:36:28&endDateTime=2018-08-01T07:36:28&amountFrom=0&amountTo=50&sortOrder=DESC&sortFields=Timestamp,Amount&merchantTransactionID=txID_1532520105368&transactionType=Payout",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"transactions"
											],
											"query": [
												{
													"key": "managedMerchantName",
													"value": "123"
												},
												{
													"key": "currency",
													"value": "GBP"
												},
												{
													"key": "startDateTime",
													"value": "2018-01-01T07:36:28"
												},
												{
													"key": "endDateTime",
													"value": "2018-08-01T07:36:28"
												},
												{
													"key": "amountFrom",
													"value": "0"
												},
												{
													"key": "amountTo",
													"value": "50"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												},
												{
													"key": "sortFields",
													"value": "Timestamp,Amount"
												},
												{
													"key": "merchantTransactionID",
													"value": "txID_1532520105368"
												},
												{
													"key": "transactionType",
													"value": "Payout"
												},
												{
													"key": "transactionStatusCode",
													"value": "1",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "5",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SEARCH Transaction",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions?currency=GBP&startDateTime=2018-12-01T07:36:28&endDateTime=2018-12-07T07:36:28&amountFrom=0&amountTo=5000&sortOrder=DESC&sortFields=Timestamp,Amount",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "managedMerchantName",
											"value": "",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "startDateTime",
											"value": "2018-12-01T07:36:28"
										},
										{
											"key": "endDateTime",
											"value": "2018-12-07T07:36:28"
										},
										{
											"key": "amountFrom",
											"value": "0"
										},
										{
											"key": "amountTo",
											"value": "5000"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "sortFields",
											"value": "Timestamp,Amount"
										},
										{
											"key": "merchantTransactionID",
											"value": "txID_1532520105368",
											"disabled": true
										},
										{
											"key": "transactionType",
											"value": "Payout",
											"disabled": true
										},
										{
											"key": "transactionStatusCode",
											"value": "1",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SEARCH Transaction with pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions?currency=GBP&startDateTime=2018-01-01T07:36:28&endDateTime=2018-08-01T07:36:28&amountFrom=0&amountTo=50&sortOrder=DESC&sortFields=Timestamp,Amount&merchantTransactionID=txID_1532520105368&transactionType=Payout&offset=0&pageSize=5",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "managedMerchantName",
											"value": null,
											"disabled": true
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "startDateTime",
											"value": "2018-01-01T07:36:28"
										},
										{
											"key": "endDateTime",
											"value": "2018-08-01T07:36:28"
										},
										{
											"key": "amountFrom",
											"value": "0"
										},
										{
											"key": "amountTo",
											"value": "50"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "sortFields",
											"value": "Timestamp,Amount"
										},
										{
											"key": "merchantTransactionID",
											"value": "txID_1532520105368"
										},
										{
											"key": "transactionType",
											"value": "Payout"
										},
										{
											"key": "transactionStatusCode",
											"value": "1",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Settlement Calendars",
			"item": [
				{
					"name": "Get Settlement Calendars",
					"item": [
						{
							"name": "GET Settlement Calendars",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/settlement-calendars?serviceLevel=standard&beneficiaryCountry=FR&beneficiaryCurrency=EUR&payoutRequestCurrency=GBP&numberOfCalendarDays=1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"settlement-calendars"
									],
									"query": [
										{
											"key": "serviceLevel",
											"value": "standard"
										},
										{
											"key": "beneficiaryCountry",
											"value": "FR"
										},
										{
											"key": "beneficiaryCurrency",
											"value": "EUR"
										},
										{
											"key": "payoutRequestCurrency",
											"value": "GBP"
										},
										{
											"key": "numberOfCalendarDays",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "865d8168-f3f1-4e02-8ab2-bba8c1c718e6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc5c5c57-036a-4c93-8ef6-7a26d426c02c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b3852332-9c5f-463a-b0d4-74715f7fe6de",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "60058b50-4a67-48b3-b6a6-31359282a70a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}