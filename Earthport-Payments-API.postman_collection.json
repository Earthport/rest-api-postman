{
	"info": {
		"_postman_id": "0b548a5a-25d6-4865-b4d1-7e056af3a92d",
		"name": "Earthport-Github-API",
		"description": "This Postman collection contains sample requests for all of Earthport's Payment APIs.\n\nEach resource is split up into separate sub-folders. Each resource also contains samples of exception case requests. i.e. requests which will return various types of validation error.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "exception cases",
					"item": [
						{
							"name": "Get Token Fail: Invalid Client Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d51fd9a-f00a-440f-ae79-9ddc7e55257d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful 401 Unauthorized Error\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"error_code=invalid_client\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error_code');",
											"    var error_code = jsonData.error_code;",
											"     pm.expect(error_code).to.equal('invalid_client');",
											"",
											"});",
											"",
											"",
											"pm.test(\"error is: Client credentials are invalid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    var error = jsonData.error;",
											"     pm.expect(error).to.equal('Client credentials are invalid');",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ua8BAqcDPo2AvxoJjSxcWFukUPT40MDg",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "Nxu1WxC274rZPjdS1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host}}/oauth/token?grant_type=client_credentials",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "client_credentials"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Token Fail: Invalid grant_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01404c9b-5a16-473f-be2c-0b0f13d3eac1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful 400 Bad Request Error\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"error_code=invalid_request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error_code');",
											"    var error_code = jsonData.error_code;",
											"     pm.expect(error_code).to.equal('invalid_request');",
											"",
											"});",
											"",
											"",
											"pm.test(\"error is: Unsupported grant type\", function () {",
											"    var jsonData = pm.response.json();",
											"    var grant_type=pm.request.url.query.get('grant_type').toString();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    var error = jsonData.error;",
											"     pm.expect(error).to.equal('Unsupported grant type : '+grant_type);",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "ua8BAqcDPo2AvxoJjSxcWFukUPT40MDg",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "Nxu1WxC274rZPjdS",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host}}/oauth/token?grant_type=password",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"oauth",
										"token"
									],
									"query": [
										{
											"key": "grant_type",
											"value": "password"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1929aa46-1009-4a14-9df3-5d46fc4485f2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response contains access_token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
									"",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host}}/oauth/token?grant_type=client_credentials",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dac0edea-c7e7-46a3-a5be-ab6eab08ce69",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ef2318b1-e487-42c8-9532-4f10b28d9053",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "Wrong Mandatory Field Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bcdb91dd-e673-42a3-99b9-65a3a7e0ed24",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d0903834-b1c7-4dcf-9fd1-03778e019c66",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserIDX\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: No Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1b750885-e737-4e0f-a5c0-3bf6a019a8af",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d99ee98c-0d0d-4533-83b2-fa1481f3dcc1",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No legal entity or individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: Mandatory Field Not Sent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4d82cd47-05e7-4ec5-95f7-7667d659ae23",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3df4a5d3-ff9b-4933-96c0-bf4cd2aaaaaf",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Field order changed (identificationNumber and idType) : Fails with SOAP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "211deb61-fd54-4e0c-bfe0-ab0ef177990c",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "57863932-a6eb-4960-9344-e5e6917a33cb",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n     \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail : Wrong key in additional data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d930446b-6e10-40d3-b22a-0852baa47f2e",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2382ff42-8494-4415-a3da-0b53b033c095",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"WRONG_KEY\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: Blank request data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "35435fcf-e322-4bc5-83c5-8ee3d2de60fd",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cdf901fc-5b04-4902-9cbc-8a09500bd870",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Success : Optional Field Not sent (address Line 2 &3)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b1ed5d7-7852-4765-b299-ff10322a3771",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "14c58384-9380-48aa-b796-bac2adf6c234",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fail: Both Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "061cee8d-f121-42ba-805f-d06e2036322e",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7759a986-e6d8-4309-81ef-c70076a79187",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both legal entity and individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create User : Individual Identity (minimum data)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c09b28a0-fa2b-413d-97c9-32c6532854d5",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d5dbb19-955e-4a9b-9a38-b760b9228ae0",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"1 Main Street\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\"\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								},
								"description": "AC"
							},
							"response": []
						},
						{
							"name": "Create User : legal Entity Identity (minimum data)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1eff8b2c-a084-487b-bd9d-ca6d3c0d58e2",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e1f66b6c-4a55-44e9-b533-e9f8e2ab3dda",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\"\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User : Individual Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f013cb0b-6989-49c6-a646-57bd70f2eac2",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "efe3fbd5-3b69-43ab-b9c2-423513b6ffa8",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"2 Main Street\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								},
								"description": "AC"
							},
							"response": []
						},
						{
							"name": "Create User : legal Entity Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a980e83f-9025-4f9c-becd-75dd56479021",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c37990b5-ba73-4f59-a8ed-1609055de72d",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User : Optional Field Included (managedMerchantName)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ced30eae-6a1e-4c35-ad92-3fa831c21130",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8145a34f-7cc2-4e43-a19d-f0b35d9c5822",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantName\": \"RestAPIManagedMerchantShared\",\r\n  \"accountCurrency\": \"any\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"1 Main Street\",\r\n        \"city\": \"London\",\r\n        \"country\": \"GB\"\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									]
								},
								"description": "AC"
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "PUT Users : Optional Field Not sent (address Line 2 &3)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d7f969b0-346a-4f4e-b76e-53cb464c94c6",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "044ca76a-c675-431e-a1ee-10cbab38de98",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n         \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users : Field order changed (identificationNumber and idType) : Fails with SOAP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "540d99e4-c74a-4b19-b756-b7994bb78980",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "93b21cd8-e2d0-4461-b537-b9b1cf7ab076",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n     \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail: Both Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "578722b9-ec5c-4b21-ae83-befee673a8cf",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "59c927fc-43e5-4f69-ad61-1f26ac4deddb",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both legal entity and individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail: No Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f7134d69-8dfe-4233-97c2-3bb76359c9e2",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c7e83eb9-8c33-4a58-9ff0-9e247a1b5edc",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No legal entity or individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail: Mandatory Field Not Sent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73b9287a-ea90-4597-8a91-68026a599f65",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b2d161ce-5517-4fa1-988b-03f035bf1391",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail : Wrong Mandatory Field Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b3937ed0-ce69-47f7-9574-3f7101d42a3b",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "02b4fcaa-d725-4054-aca9-b15b716d5d51",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail : Wrong key in additional data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e330241a-5b7e-467a-9b2b-85802f6c0938",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f5bc8d92-6b0b-4627-9036-535cf67e9c5a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"WRONG_KEY\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090152208",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090152208"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Users Fail: Blank request data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bae89542-5122-4e54-916d-125c4529ab30",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "45df37aa-475c-4507-9d49-bd2ecb7d47a5",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890146942",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890146942"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PUT Users : Individual Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26e3592f-ca2e-436c-9258-f9127330cc82",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c322032b-9f0a-4aac-8af6-2f4646735eb3",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"Birmingham\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"Manchester\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2010-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Users : legal Entity Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6fdcd307-1250-4f65-9a5c-f902822cffcb",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a07ea034-1a0e-4665-97b5-ae071b660f1b",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"Birmingham\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Disable User",
					"item": [
						{
							"name": "DISABLE user",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146978",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146978"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get User",
					"item": [
						{
							"name": "GET user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Add Deposit Reference",
					"item": [
						{
							"name": "POST Deposit Reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8406f0ee-d805-44dc-9708-c1e8cda38bcb",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"depositReference\": \"44ERA1234568\"\r\n}\r\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/deposit-references",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"deposit-references"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Validate User",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST Users Fail: No Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "65d81a70-3387-4adc-9cf4-fbd25bb37e6f",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ab58b276-3fc8-490c-9ef2-91e6289a9591",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No legal entity or individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail: Mandatory Field Not Sent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "de7d494f-d2dd-457d-9fbc-5b90508a0836",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0ca4741c-be5f-450a-bbfd-839e0c9a630a",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail : Wrong key in additional data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "957d2594-32fc-4e99-bb88-8f912c2a9d66",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c1c7e9d6-4cf6-44df-85d1-b280e5e62b47",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"WRONG_KEY\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail: Blank request data",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7322ce25-816d-4e4f-b2cc-9f39dea2828d",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fc5b0c15-26f6-4609-b70f-6ab5c8eee338",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail: Both Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d499a12-3e54-4dc7-b8a6-9a5bd4d1409b",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28e8e592-238b-43a4-8395-6f10686a3a40",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both legal entity and individual identity provided within PayerIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"managedMerchantIdentity\": \"ABCCORP\",\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Users Fail : Wrong Mandatory Field Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cbde6d00-487c-410f-8b28-6fb6fc0539ee",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c93bfa37-1b68-45ec-a50d-beacf27ca3eb",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response contains merchant User ID\", function () {",
													"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
													"});",
													"",
													"pm.test(\"Response contains Earthport generated VAN\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var epUserID = jsonData.epUserID;",
													"    ",
													"    console.log('epUserID=='+epUserID);",
													"    ",
													"    //Earthport VAN is 13 digits and starts with 34",
													"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
													"    var match = pattern.test(epUserID);",
													"    ",
													"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
													"    ",
													"    pm.expect(match).to.be.true;",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": {\"merchantUserIDX\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyNam\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users"
											],
											"query": [
												{
													"key": "action",
													"value": "validate"
												},
												{
													"key": "beneficiaryCountryCode",
													"value": "GB"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST Users : Individual Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0fd099c5-ae8a-40e7-bb8d-6d14f5e0007e",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f773a58e-763b-4051-a4e6-95312132b4bc",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									],
									"query": [
										{
											"key": "action",
											"value": "validate"
										},
										{
											"key": "beneficiaryCountryCode",
											"value": "GB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Users : legal Entity Identity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f607f1d9-d4ea-45ae-bb8d-eed0990e083f",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3fee5a04-8f27-483c-bee8-ebb4953be8e6",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									],
									"query": [
										{
											"key": "action",
											"value": "validate"
										},
										{
											"key": "beneficiaryCountryCode",
											"value": "GB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Users : Optional Field Not sent (address Line 2 &3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "346d6c3d-9e31-4fb4-9a8b-2cc44f5d0cae",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2934054b-d0a7-493b-81a2-a8bfd6b2fd03",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n         \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									],
									"query": [
										{
											"key": "action",
											"value": "validate"
										},
										{
											"key": "beneficiaryCountryCode",
											"value": "GB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Users : Field order changed (identificationNumber and idType) : Fails with SOAP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4cbf0c63-ee15-41b4-a90b-beae09cb5a77",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cc8050d9-7d30-4bee-bcc9-020b1a71702e",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant User ID\", function () {",
											"    var expected_merchant_user_id = \"userID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.merchantUserID).to.eql(expected_merchant_user_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated VAN\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epUserID = jsonData.epUserID;",
											"    ",
											"    console.log('epUserID=='+epUserID);",
											"    ",
											"    //Earthport VAN is 13 digits and starts with 34",
											"    var pattern = new RegExp(\"^(34)([0-9]{11})$\");",
											"    var match = pattern.test(epUserID);",
											"    ",
											"    console.log('pattern.test(epUserID)=='+pattern.test(epUserID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\r\n  \"accountCurrency\": \"GBP\",\r\n  \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n     \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users?action=validate&beneficiaryCountryCode=GB",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users"
									],
									"query": [
										{
											"key": "action",
											"value": "validate"
										},
										{
											"key": "beneficiaryCountryCode",
											"value": "GB"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Beneficiary Bank Accounts",
			"item": [
				{
					"name": "Add beneficiary bank account",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST bank-accounts Fail: no Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "361b9e74-03ce-4d3c-b26f-99678d925bac",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fe7567bb-2416-4122-901e-f8ab86e4fbdf",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Missing mandatory field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ef3cadf0-1eea-4097-8070-e92e9175ab0b",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04b3fe39-0224-45d2-8714-a8259ce97ee0",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The unstructured identity data block contains an invalid item');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n     \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: additionalData wrong key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d6a644a0-6e96-4189-8ee1-4d5962645658",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "848d5137-ab6c-411b-92be-165ab24d7a0a",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The additional data key supplied is not known');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"WRONG_KEY\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Wrong Mandatory fieldname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "21e80bc2-69ec-411f-bfcf-92cf40cba3ee",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2a81752c-1665-4ac4-8cc0-9accac37b306",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Schema validation failure during JAXB parsing');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNamesX\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : unstructuredIdentity Wrong key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d6baf031-80f3-47d8-b77e-590586135a7b",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "90d8aeea-f929-4d1b-8d1c-3ee08f582211",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The unstructured identity data block contains an invalid item');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"K1\",\n          \"value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : empty Payload",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "81619305-3fa9-4f2d-ada3-f00aab90114e",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ca76a6a8-20a8-46b4-886f-92d45b08a663",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Error parsing request payload');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: More than one Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1f50378a-8ac3-48c5-b9d2-1deeb5c29747",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3b68885d-92e6-42d6-84d5-c7f895dc068e",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('More than one identity is provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t  \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"K1\",\n          \"value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST bank-accounts: individualIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b734608d-1e3b-4bcd-8606-c309e7cea26f",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e1e4475b-da1b-4334-ad8d-ad828151383c",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: legalEntityIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be97983f-ec49-40d2-974a-98641235013e",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3411c563-2594-41dd-999c-d31e39492d2e",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n        \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts : unstructuredIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "32138b27-4fd6-44a2-b1a4-9f28554d7a45",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "33bebede-f41c-4f5d-ac93-be18e32b60bc",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"     //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"Name\",\n          \"value\": \"John Smith\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: FR/EUR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c9e0e8b1-e071-4238-855e-f3a2d69e4d76",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "761dd207-74c7-4781-93af-6f8ab6e597ec",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"FR\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"FR\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"FR\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"FR\",\n    \"currencyCode\": \"EUR\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"iban\",\n        \"value\": \"FR7630588600013765749018822\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: US/USD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "03ae9be1-4b78-4b9e-98bf-2cba6381d479",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "43d83d87-e0b1-4c98-9f2f-f30464b7ba52",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"US\",\n          \"postcode\": \"123456\",\n          \"province\": \"AZ\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"US\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"US\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"US\",\n    \"currencyCode\": \"USD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"0210000893\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"abaRoutingNumber\",\n        \"value\": \"081302633\"\n      },\n      {\n        \"key\": \"accountType\",\n        \"value\": \"1\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: AU/AUD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8aa6eb68-9ba8-4856-a779-82d2e991a396",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bb522acf-f19b-467b-9c6b-77525b42acc2",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"AU\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"AU\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"AU\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"AU\",\n    \"currencyCode\": \"AUD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"000414001\"\n      },\n      {\n        \"key\": \"bankCode\",\n        \"value\": \"342\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"branchCode\",\n        \"value\": \"307\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Optional Field Not sent (address Line 2 &3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a6d6ccad-94d8-41d4-8661-078cf97f773e",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "72148c44-9bd9-4aa8-bcc0-5cbb60f33673",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"     //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Field order changed (identificationNumber and idType) : Fails with SOAP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "58762fd7-207b-4211-87ae-da772ff8931e",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12e00d56-fccd-485c-a03c-b2d5eb74b2dd",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchant bank ID\", function () {",
											"    var expected_merchant_bank_id = \"bankID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantBankID=jsonData.benBankID.merchantBankID;",
											"    console.log('merchantBankID=='+merchantBankID);",
											"",
											"    pm.expect(merchantBankID).to.eql(expected_merchant_bank_id);",
											"});",
											"",
											"",
											"pm.test(\"Response contains correct epUserID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epUserID\");",
											"    var jsonData = pm.response.json();",
											"    var epUserID=jsonData.userID.epUserID.toString();",
											"    var epUserID_url=pm.request.url.path[1];",
											"     console.log('epUserID=='+epUserID);",
											"      console.log('epUserID_url=='+epUserID_url);",
											"    ",
											"    pm.expect(epUserID_url).to.eql(epUserID);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated bankID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epBankID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epBankID = jsonData.benBankID.epBankID;",
											"    ",
											"    console.log('epBankID=='+epBankID);",
											"    ",
											"     //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epBankID);",
											"    ",
											"    console.log('pattern.test(epBankID)=='+pattern.test(epBankID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"identificationNumber\": \"ABC123\",\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Validate beneficiary bank account",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST bank-accounts Fail : empty Payload",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c1514caf-fe4e-4d4a-a81d-3a9791d8a044",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b9072d7f-3b63-4f77-9f41-35e72843cf12",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Error parsing request payload');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: no Identity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb696bb9-1278-4a59-a2b1-6ae6bc24b188",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d75cc6fd-94c7-4b80-a970-b0eea10b4a0f",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No company or individual identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : unstructuredIdentity Wrong key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b446d420-8cb0-443b-9996-1ef8de8eef0a",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "42474c93-deaa-4d0d-9936-4cf093b084f4",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('The unstructured identity data block contains an invalid item');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n    \t\"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"K1\",\n          \"value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Wrong Mandatory fieldname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "83767bb2-4da0-4353-87e3-9b440e7d7b50",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "05f2fa8a-e14e-495c-9a89-fbf9d9c44003",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Schema validation failure during JAXB parsing');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNamesX\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: additionalData wrong key",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1632ae27-5e0b-4c9a-ac82-e9044f7a7f41",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5d12c394-8ad1-41bd-824b-ec966c133e58",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('additionalDatakey not found that matches type=\\'WRONG_KEY\\'');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"WRONG_KEY\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail : unstructuredIdentity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5a47dbea-7797-4a36-9636-6104f83e35ae",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73e96ead-b590-470c-870c-a646b67c94e5",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('No company or individual identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"Name\",\n          \"value\": \"John Smith\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: More than one Identities",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c5126cd5-ed11-4544-b581-8f266803d879",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f9d3600b-d120-4e77-89b8-7ac6e86e842b",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Both company and individual identity provided within BeneficiaryIdentity token.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t  \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"unstructuredIdentity\": [\n        {\n          \"key\": \"K1\",\n          \"value\": \"V1\"\n        }\n      ],\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST bank-accounts Fail: Missing mandatory field",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7793ec27-c0fd-4da2-b365-3aa5d471cdb8",
												"type": "text/javascript",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6afcc345-3a93-4e56-b39c-15b4a8e71dba",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"shortMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var shortMsg = jsonData.shortMsg;",
													"    ",
													"    console.log('shortMsg=='+shortMsg);",
													"    ",
													"    pm.expect(shortMsg).to.equal('Schema validation failure during JAXB parsing');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n     \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
										},
										"url": {
											"raw": "https://{{host}}/v1/bank-accounts",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"bank-accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST bank-accounts: individualIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a670b84-4ef3-495b-b40d-d00b67a66403",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f7791582-914b-4e8d-99c4-d80195fa471c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: legalEntityIdentity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7200a733-04aa-446e-aaab-7fdbf00f37ea",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9670b731-a486-4f7d-b925-b0984325c8ab",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n        \"legalEntityIdentity\": {\n        \"legalEntityName\": \"XYZ Corp\",\n        \"legalEntityRegistration\": {\n          \"legalEntityRegistrationCountry\": \"GB\",\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\n          \"legalEntityRegistrationProvince\": \"ABC\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        }\n      },\n      \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: FR/EUR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aaa339d5-2bba-4b3b-a420-8e595d8a80f6",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5f22efe8-c33a-4ea6-9e3f-8aa3643b14fd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"FR\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"FR\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"FR\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"FR\",\n    \"currencyCode\": \"EUR\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"iban\",\n        \"value\": \"FR7630588600013765749018822\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      }\n    ]\n  }\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: US/USD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d7e4b69-216f-45c4-8a15-f255bcc37e27",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6d42eeac-677c-4c63-b6d5-6c4c5a8baa4c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"US\",\n          \"postcode\": \"123456\",\n          \"province\": \"AZ\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"US\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"US\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"US\",\n    \"currencyCode\": \"USD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"0210000893\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"abaRoutingNumber\",\n        \"value\": \"081302633\"\n      },\n      {\n        \"key\": \"accountType\",\n        \"value\": \"1\"\n      }\n    ]\n  }\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: AU/AUD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a51cb88-71c5-4783-9f6b-12937adcad44",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70c15901-d3f4-47cc-9bab-288103457dac",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"AU\",\n          \"postcode\": \"123456\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"AU\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"AU\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"AU\",\n    \"currencyCode\": \"AUD\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"000414001\"\n      },\n      {\n        \"key\": \"bankCode\",\n        \"value\": \"342\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"sdsd\"\n      },\n      {\n        \"key\": \"branchCode\",\n        \"value\": \"307\"\n      }\n    ]\n  }\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Optional Field Not sent (address Line 2 &3)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a3bcd117-c423-4e52-81ac-b82ef6bf071c",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4189b3e8-7067-454f-abc7-bce9b0f9ba7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST bank-accounts: Field order changed (identificationNumber and idType) : Fails with SOAP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "17784108-c1a4-427d-9f5a-1ec3610de939",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1977845e-48e8-4559-8b01-df560b900627",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains correct error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"isBankAccountValid\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var isBankAccountValid = jsonData.isBankAccountValid;",
											"    ",
											"    console.log('isBankAccountValid=='+isBankAccountValid);",
											"    ",
											"    pm.expect(isBankAccountValid).to.equal(true);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"identificationNumber\": \"ABC123\",\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n  }"
								},
								"url": {
									"raw": "https://{{host}}/v1/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"bank-accounts"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "41fbfa95-7abd-45ba-a036-85a2dfe4b928",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3a322b12-bdaf-4927-b148-a299b47b8df0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Validate beneficiary bank account with expected settlement date",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "POST Validate Beneficiary and get expected settlement: Fail (unstructured Identity)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40379c61-8b08-4a43-b457-b8f796e5a622",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0a1a106c-4397-4623-9f35-a9e738f0136b",
												"exec": [
													"var moment = require(\"moment\")\r",
													"\r",
													"pm.environment.set('anticipatedPayoutRequestTime', moment().add(10, 'days').toISOString())"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n            \"beneficiaryIdentity\": {\r\n      \"unstructuredIdentity\": [\r\n        {\r\n          \"key\": \"Name\",\r\n          \"value\": \"John Smith\"\r\n        }\r\n      ],\r\n      \"additionalData\": [\r\n        {\r\n          \"key\": \"NATIONAL_ID_CARD\",\r\n          \"value\": \"TT6789CC\"\r\n        }\r\n      ]\r\n    },\r\n            \"description\": \"test\",\r\n            \"countryCode\": \"GB\",\r\n            \"bankAccountDetails\": [\r\n                {\r\n                    \"key\": \"accountName\",\r\n                    \"value\": \"Mr J Doe\"\r\n                },\r\n                {\r\n                    \"key\": \"accountNumber\",\r\n                    \"value\": \"01896660\"\r\n                },\r\n                {\r\n                    \"key\": \"bankName\",\r\n                    \"value\": \"Natwest\"\r\n                },\r\n                {\r\n                    \"key\": \"sortCode\",\r\n                    \"value\": 401118\r\n                }\r\n            ],\r\n        \"anticipatedPayoutRequestTime\": \"{{anticipatedPayoutRequestTime}}\",\r\n        \"payoutRequestCurrency\": \"GBP\",\r\n        \"serviceLevel\": \"standard\",\r\n        \"payerType\": \"user\",\r\n        \"payerIdentity\": {\r\n      \"unstructuredIdentity\": [\r\n        {\r\n          \"key\": \"Name\",\r\n          \"value\": \"John Smith\"\r\n        }\r\n      ],\r\n      \"additionalData\": [\r\n        {\r\n          \"key\": \"NATIONAL_ID_CARD\",\r\n          \"value\": \"TT6789CC\"\r\n        }\r\n      ]\r\n    }\r\n    \r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1//bank-accounts/expected-settlement",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"",
												"bank-accounts",
												"expected-settlement"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST Validate Beneficiary and get expected settlement (Individual Identity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21a6cbd0-f8c7-4390-a2d3-0b2f5d910955",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f33b0b1b-84b5-44ea-962e-0406ece972b5",
										"exec": [
											"var moment = require(\"moment\")\r",
											"\r",
											"pm.environment.set('anticipatedPayoutRequestTime', moment().add(10, 'days').toISOString())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n            \"beneficiaryIdentity\": {\r\n      \"individualIdentity\": {\r\n        \"name\": {\r\n          \"familyName\": \"Smith\",\r\n          \"givenNames\": \"John\"\r\n        },\r\n        \"address\": {\r\n          \"addressLine1\": \"ABC\",\r\n          \"addressLine2\": \"ABC\",\r\n          \"addressLine3\": \"ABC\",\r\n          \"city\": \"ABC\",\r\n          \"country\": \"GB\",\r\n          \"postcode\": \"EC1A 4HY\",\r\n          \"province\": \"ABC\"\r\n        },\r\n        \"birthInformation\": {\r\n          \"cityOfBirth\": \"ABC\",\r\n          \"countryOfBirth\": \"GB\",\r\n          \"dateOfBirth\": \"2001-01-01\"\r\n        },\r\n        \"identification\": [\r\n          {\r\n            \"idType\": \"Passport\",\r\n            \"identificationCountry\": \"GB\",\r\n            \"identificationNumber\": \"ABC123\",\r\n            \"validFromDate\": \"2001-01-01\",\r\n            \"validToDate\": \"2001-01-01\"\r\n          }\r\n        ]\r\n      },\r\n\t   \"additionalData\": [\r\n        {\r\n          \"key\": \"NATIONAL_ID_CARD\",\r\n          \"value\": \"TT6789CC\"\r\n        }\r\n      ]\r\n    },\r\n            \"description\": \"test\",\r\n            \"countryCode\": \"GB\",\r\n            \"bankAccountDetails\": [\r\n                {\r\n                    \"key\": \"accountName\",\r\n                    \"value\": \"Mr J Doe\"\r\n                },\r\n                {\r\n                    \"key\": \"accountNumber\",\r\n                    \"value\": \"01896660\"\r\n                },\r\n                {\r\n                    \"key\": \"bankName\",\r\n                    \"value\": \"Natwest\"\r\n                },\r\n                {\r\n                    \"key\": \"sortCode\",\r\n                    \"value\": 401118\r\n                }\r\n            ],\r\n        \"anticipatedPayoutRequestTime\": \"{{anticipatedPayoutRequestTime}}\",\r\n        \"payoutRequestCurrency\": \"GBP\",\r\n        \"serviceLevel\": \"standard\",\r\n        \"payerType\": \"user\",\r\n        \"payerIdentity\": {\r\n    \"individualIdentity\": {\r\n      \"name\": {\r\n        \"familyName\": \"Smith\",\r\n        \"givenNames\": \"John\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      },\r\n      \"birthInformation\": {\r\n        \"cityOfBirth\": \"ABC\",\r\n        \"countryOfBirth\": \"GB\",\r\n        \"dateOfBirth\": \"2001-01-01\"\r\n      },\r\n      \"identification\": [\r\n        {\r\n          \"idType\": \"Passport\",\r\n          \"identificationCountry\": \"GB\",\r\n          \"identificationNumber\": \"ABC123\",\r\n          \"validFromDate\": \"2001-01-01\",\r\n          \"validToDate\": \"2001-01-01\"\r\n        }\r\n      ]\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n    \r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1//bank-accounts/expected-settlement",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"",
										"bank-accounts",
										"expected-settlement"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Validate Beneficiary and get expected settlement (Legal Entity Identity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1ede73b-2c86-45d3-a343-6e52e83b4732",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e0c8409-1711-4853-8bcc-1d36d0280f46",
										"exec": [
											"var moment = require(\"moment\")\r",
											"\r",
											"pm.environment.set('anticipatedPayoutRequestTime', moment().add(10, 'days').toISOString())"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n            \"beneficiaryIdentity\": {\r\n        \"legalEntityIdentity\": {\r\n        \"legalEntityName\": \"XYZ Corp\",\r\n        \"legalEntityRegistration\": {\r\n          \"legalEntityRegistrationCountry\": \"GB\",\r\n          \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n          \"legalEntityRegistrationProvince\": \"ABC\"\r\n        },\r\n        \"address\": {\r\n          \"addressLine1\": \"ABC\",\r\n          \"addressLine2\": \"ABC\",\r\n          \"addressLine3\": \"ABC\",\r\n          \"city\": \"ABC\",\r\n          \"country\": \"GB\",\r\n          \"postcode\": \"EC1A 4HY\",\r\n          \"province\": \"ABC\"\r\n        }\r\n      },\r\n      \"additionalData\": [\r\n        {\r\n          \"key\": \"NATIONAL_ID_CARD\",\r\n          \"value\": \"TT6789CC\"\r\n        }\r\n      ]\r\n    },\r\n            \"description\": \"test\",\r\n            \"countryCode\": \"GB\",\r\n            \"bankAccountDetails\": [\r\n                {\r\n                    \"key\": \"accountName\",\r\n                    \"value\": \"Mr J Doe\"\r\n                },\r\n                {\r\n                    \"key\": \"accountNumber\",\r\n                    \"value\": \"01896660\"\r\n                },\r\n                {\r\n                    \"key\": \"bankName\",\r\n                    \"value\": \"Natwest\"\r\n                },\r\n                {\r\n                    \"key\": \"sortCode\",\r\n                    \"value\": 401118\r\n                }\r\n            ],\r\n        \"anticipatedPayoutRequestTime\": \"{{anticipatedPayoutRequestTime}}\",\r\n        \"payoutRequestCurrency\": \"GBP\",\r\n        \"serviceLevel\": \"standard\",\r\n        \"payerType\": \"user\",\r\n        \"payerIdentity\": {\r\n      \"legalEntityIdentity\": {\r\n      \"legalEntityName\": \"XYZ Corp\",\r\n      \"legalEntityRegistration\": {\r\n        \"legalEntityRegistrationCountry\": \"GB\",\r\n        \"legalEntityRegistrationNumber\": \"QWERTY54321\",\r\n        \"legalEntityRegistrationProvince\": \"ABC\"\r\n      },\r\n      \"address\": {\r\n        \"addressLine1\": \"ABC\",\r\n        \"addressLine2\": \"ABC\",\r\n        \"addressLine3\": \"ABC\",\r\n        \"city\": \"ABC\",\r\n        \"country\": \"GB\",\r\n        \"postcode\": \"EC1A 4HY\",\r\n        \"province\": \"ABC\"\r\n      }\r\n    },\r\n    \"additionalData\": [\r\n      {\r\n        \"key\": \"NATIONAL_ID_CARD\",\r\n        \"value\": \"TT6789CC\"\r\n      }\r\n    ]\r\n  }\r\n    \r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1//bank-accounts/expected-settlement",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"",
										"bank-accounts",
										"expected-settlement"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get beneficiary bank account",
					"item": [
						{
							"name": "GET Bank Account",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/bank-accounts/4034215",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"bank-accounts",
										"4034215"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Disable beneficiary bank account",
					"item": [
						{
							"name": "DELETE Bank Account",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/bank-accounts/4034215",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"bank-accounts",
										"4034215"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "List beneficiary bank accounts",
					"item": [
						{
							"name": "GET bank-accounts",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts"
									],
									"query": [
										{
											"key": "includeDeleted",
											"value": "true",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Create Payment to pre-registered account",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "Post Payments Fail: wrong requestedFX",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "caf81e5d-972a-49a0-b0cd-ad8f66dceac5",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28c80988-010b-468a-a10f-7decaa38ad1c",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"failures\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var failure = jsonData.failures.failure.value;",
													"    ",
													"    console.log('failure=='+failure);",
													"    ",
													"    pm.expect(failure).to.equal('the value is not a member of the enumeration: (\\\"FF\\\"/\\\"FV\\\"/\\\"VF\\\")');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FX\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts",
												"4096889",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Payments Fail: beneficiary currency wrong",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c0c27af2-03f3-4749-995f-f972088c77fd",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "919bf049-b4b7-44ac-8ce9-57e62fbc6a9b",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Currency of supplied beneficiary amount [EUR] must match that of beneficiary bank account [GBP]');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"EUR\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 123,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts",
												"4096889",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Payments Fail: wrong requestedFX type",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4011ded6-c673-409a-a8b7-fe07146ccbf4",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "43f466f4-baf9-47ff-9664-7df1afd5d06f",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('The requested FX type FF is not valid for payout only input strategy.');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts",
												"4096889",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Payments Fail: BulkTXTicket vs SingleFXTicket",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b9e28fb-1be4-40e1-924c-afc83c488e96",
												"exec": [
													"var milliseconds = new Date().getTime();",
													"pm.globals.set(\"current_time_in_ms\", milliseconds);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c4882d58-0912-497a-8906-e7ac7a4e9682",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Provision of both payout request amount and beneficiary amount must be accompanied by a BulkTXTicket, not a SingleFXTicket');",
													"});",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 123,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3409890147454",
												"bank-accounts",
												"4096889",
												"payments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Post Payments: GB/GBP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c696c39-2b79-4d28-9d2a-6ee6dcd0cf39",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "642d95c7-0c0a-425f-a90f-06111cc4aa9c",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t]\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: GB/GBP (minimum data)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "54b3b07c-82ee-436f-be4f-d9d41cfc1e2c",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5e7af54f-a1c5-405e-8c07-d37b9c92193d",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"payerType\": \"user\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\"\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								},
								"description": "This test assumes you have registered a GB/GBP beneficiary bank account with an Earthport bank ID = 4034215"
							},
							"response": []
						},
						{
							"name": "Post Payments: GB/GBP (minimum data & inline FX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a8e7d38a-16e4-4f6c-8891-d28cb51f9a30",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32a58459-c5ea-44cb-9b93-1d02d99467bf",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"payerType\": \"user\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\"\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								},
								"description": "This test assumes you have registered a GB/GBP beneficiary bank account with an Earthport bank ID = 4034215. Not in the sample body that the currency of the payout request amount differs from the beneficiary bank account."
							},
							"response": []
						},
						{
							"name": "Post Payments: US/USD (requires purpose of payment)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10d2a12c-5b9b-4b45-b738-3af2f6283641",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b4579c5e-08fe-4aea-8273-b364ad8794a6",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"USD\"\r\n\t},\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"PURPOSE_OF_PAYMENT\",\r\n\t\t\t\"value\": \"REM\"\r\n\t\t}\r\n\t]\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096892/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096892",
										"payments"
									]
								},
								"description": "This payment contains an example of how to set the purpose of payment."
							},
							"response": []
						},
						{
							"name": "Post Payments: AU/AUD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "00306163-d897-4a1e-b81c-f65b58719f35",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "04bf24e7-3eea-4403-9903-ea123d1640dd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"AUD\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"AUD\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"AUD\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3430090148823/bank-accounts/7429308/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3430090148823",
										"bank-accounts",
										"7429308",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: FR/EUR",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "25b029bf-971c-4402-8dfe-3302eeb9637e",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bf809913-7085-4642-8335-2090183f0c3f",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"EUR\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"EUR\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096891/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096891",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: FR/EUR (minimum data)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ed71432-bfe9-4926-8148-56e9780e8df0",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "52d88752-69c0-414c-a839-d5fc786c3974",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"EUR\"\r\n\t},\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"payerType\": \"user\"\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096891/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096891",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: transactionHold - offsetMinutes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ead7aa8e-e830-452a-b28d-931a400df14b",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f7a22c1-73cd-4970-b495-c4055d9dbce4",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: transactionHold - releaseDateTime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b22ea04-b775-4964-b83a-35c1318b7a47",
										"exec": [
											"",
											"",
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);",
											"",
											"var d = new Date(new Date().getTime()+ 30*60000);",
											"",
											"var datestring = d.getFullYear() +\"-\"+ (\"0\"+(d.getMonth()+1)).slice(-2) +\"-\"+  (\"0\"+d.getDate()).slice(-2)  + \"T\" + (\"0\"+(d.getHours())).slice(-2) + \":\" + (\"0\"+d.getMinutes()).slice(-2)+ \":\" +(\"0\"+d.getSeconds()).slice(-2)+\".000+00:00\" ;",
											"pm.globals.set(\"date_time_1_hour\", datestring);",
											"",
											"console.log('date_time_1_hour=='+datestring);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "87dba922-9de1-4ac6-a295-f3381c95784a",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"beneficiaryAmountInformation\": {\r\n\t\t\"beneficiaryAmount\": {\r\n\t\t\t\"amount\": 11,\r\n\t\t\t\"currency\": \"GBP\"\r\n\t\t},\r\n\t\t\"payoutCurrency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"releaseDateTime\": \"{{date_time_1_hour}}\"\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post Payments: no beneficiaryAmountInformation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "342e05dc-6969-44e7-b602-59bd89c8c023",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "af080f9f-2b90-4926-a867-99680f306619",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"",
											"",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"amount\": 11,\r\n\t\t\"currency\": \"GBP\"\r\n\t},\r\n\t\"serviceLevel\": \"standard\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\r\n\t\"fxTicketID\": 0,\r\n\t\"requestedFX\": \"FF\",\r\n\t\"payerType\": \"user\",\r\n\t\"payoutType\": \"NA\",\r\n\t\"payoutDetails\": [{\r\n\t\t\t\"key\": \"K1\",\r\n\t\t\t\"value\": \"V1\"\r\n\t\t}, {\r\n\t\t\t\"key\": \"K2\",\r\n\t\t\t\"value\": \"V2\"\r\n\t\t}\r\n\t],\r\n\t\"transactionHold\": {\r\n\t\t\"offsetMinutes\": 10\r\n\t}\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890147454/bank-accounts/4096889/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890147454",
										"bank-accounts",
										"4096889",
										"payments"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Payment",
					"item": [
						{
							"name": "Create Payment (New User, New Bank Account)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b8352d2f-bf9e-43c9-85be-cb7cecfee315",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user\":{\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\n  \"accountCurrency\": \"any\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"key\": \"NATIONAL_ID_CARD\",\n        \"value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n\n},\n\n\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 11,\n\t\t\"currency\": \"GBP\"\n\t},\n\t\"beneficiaryAmountInformation\": {\n\t\t\"beneficiaryAmount\": {\n\t\t\t\"amount\": 11,\n\t\t\t\"currency\": \"GBP\"\n\t\t},\n\t\t\"payoutCurrency\": \"GBP\"\n\t},\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment (Existing User, New Bank Account)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69c2dc87-2b16-4ad5-b27d-9bb409412021",
										"type": "text/javascript",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"user\":{\n  \"userID\": {\"merchantUserID\": \"userID_1538058659086\"},\n  \"accountCurrency\": \"any\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"key\": \"NATIONAL_ID_CARD\",\n        \"value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n\n},\n\n\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 11,\n\t\t\"currency\": \"GBP\"\n\t},\n\t\"beneficiaryAmountInformation\": {\n\t\t\"beneficiaryAmount\": {\n\t\t\t\"amount\": 11,\n\t\t\t\"currency\": \"GBP\"\n\t\t},\n\t\t\"payoutCurrency\": \"GBP\"\n\t},\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment (Existing User, Existing Bank Account)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "60293728-afbe-4e81-969e-8ffd2f94e0ac",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user\":{\n  \"userID\": {\"merchantUserID\": \"userID_1562841763897\"},\n  \"accountCurrency\": \"any\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"key\": \"NATIONAL_ID_CARD\",\n        \"value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\": {\"merchantBankID\": \"bankID_1562841793003\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n\n},\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 12.61,\n\t\t\"currency\": \"EUR\"\n\t},\n\t\"fxTicketID\": 665020,\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment Optional Field Included (managedMerchantName)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7ad90d09-d25e-4b67-9acb-3c810f484a2b",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"user\":{\n  \"userID\": {\"merchantUserID\": \"userID_{{current_time_in_ms}}\"},\n  \"managedMerchantName\": \"RestAPIManagedMerchantShared\",\n  \"accountCurrency\": \"any\",\n  \"payerIdentity\": {\n    \"individualIdentity\": {\n      \"name\": {\n        \"familyName\": \"Smith\",\n        \"givenNames\": \"John\"\n      },\n      \"address\": {\n        \"addressLine1\": \"ABC\",\n        \"addressLine2\": \"ABC\",\n        \"addressLine3\": \"ABC\",\n        \"city\": \"ABC\",\n        \"country\": \"GB\",\n        \"postcode\": \"EC1A 4HY\",\n        \"province\": \"ABC\"\n      },\n      \"birthInformation\": {\n        \"cityOfBirth\": \"ABC\",\n        \"countryOfBirth\": \"GB\",\n        \"dateOfBirth\": \"2001-01-01\"\n      },\n      \"identification\": [\n        {\n          \"idType\": \"Passport\",\n          \"identificationCountry\": \"GB\",\n          \"identificationNumber\": \"ABC123\",\n          \"validFromDate\": \"2001-01-01\",\n          \"validToDate\": \"2001-01-01\"\n        }\n      ]\n    },\n    \"additionalData\": [\n      {\n        \"key\": \"NATIONAL_ID_CARD\",\n        \"value\": \"TT6789CC\"\n      }\n    ]\n  }\n},\n\n\"bankAccount\": {\n  \"benBankID\":{ \"merchantBankID\": \"bankID_{{current_time_in_ms}}\"},\n    \"beneficiaryIdentity\": {\n      \"individualIdentity\": {\n        \"name\": {\n          \"familyName\": \"Smith\",\n          \"givenNames\": \"John\"\n        },\n        \"address\": {\n          \"addressLine1\": \"ABC\",\n          \"addressLine2\": \"ABC\",\n          \"addressLine3\": \"ABC\",\n          \"city\": \"ABC\",\n          \"country\": \"GB\",\n          \"postcode\": \"EC1A 4HY\",\n          \"province\": \"ABC\"\n        },\n        \"birthInformation\": {\n          \"cityOfBirth\": \"ABC\",\n          \"countryOfBirth\": \"GB\",\n          \"dateOfBirth\": \"2001-01-01\"\n        },\n        \"identification\": [\n          {\n            \"idType\": \"Passport\",\n            \"identificationCountry\": \"GB\",\n            \"identificationNumber\": \"ABC123\",\n            \"validFromDate\": \"2001-01-01\",\n            \"validToDate\": \"2001-01-01\"\n          }\n        ]\n      },\n\t   \"additionalData\": [\n        {\n          \"key\": \"NATIONAL_ID_CARD\",\n          \"value\": \"TT6789CC\"\n        }\n      ]\n    },\n    \"description\": \"Bank Account Description\",\n    \"countryCode\": \"GB\",\n    \"currencyCode\": \"GBP\",\n    \"bankAccountDetails\": [\n      {\n        \"key\": \"accountNumber\",\n        \"value\": \"06970093\"\n      },\n      {\n        \"key\": \"accountName\",\n        \"value\": \"account name\"\n      },\n      {\n        \"key\": \"bankName\",\n        \"value\": \"Test Bank\"\n      },\n      {\n        \"key\": \"sortCode\",\n        \"value\": \"800554\"\n      }\n    ]\n\n},\n\n\n\"payment\": {\n\t\"transactionID\": {\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\n\t},\n\t\"payoutRequestAmount\": {\n\t\t\"amount\": 11,\n\t\t\"currency\": \"GBP\"\n\t},\n\t\"beneficiaryAmountInformation\": {\n\t\t\"beneficiaryAmount\": {\n\t\t\t\"amount\": 11,\n\t\t\t\"currency\": \"GBP\"\n\t\t},\n\t\t\"payoutCurrency\": \"GBP\"\n\t},\n\t\"serviceLevel\": \"standard\",\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\",\n\t\"payerType\": \"user\",\n\t\"payoutType\": \"NA\",\n\t\"payoutDetails\": [{\n\t\t\t\"key\": \"K1\",\n\t\t\t\"value\": \"V1\"\n\t\t}, {\n\t\t\t\"key\": \"K2\",\n\t\t\t\"value\": \"V2\"\n\t\t}\n\t]\n}\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Payment Meta Data",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET payout/meta Fail: No territory profile (AU-AUD)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{host}}/v1/payments/meta?countryCode=AU&currencyCode=AUD&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"payments",
												"meta"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "AU"
												},
												{
													"key": "currencyCode",
													"value": "AUD"
												},
												{
													"key": "beneficiaryIdentityEntityType",
													"value": "individual"
												},
												{
													"key": "serviceLevel",
													"value": "standard"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET payout/meta GB-GBP",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=GB&currencyCode=GBP&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "GB"
										},
										{
											"key": "currencyCode",
											"value": "GBP"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET payout/meta FR-EUR",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=FR&currencyCode=EUR&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "FR"
										},
										{
											"key": "currencyCode",
											"value": "EUR"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET payout/meta US-USD",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=US&currencyCode=USD&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "US"
										},
										{
											"key": "currencyCode",
											"value": "USD"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET payout/meta IN-INR",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/payments/meta?countryCode=IN&currencyCode=INR&beneficiaryIdentityEntityType=individual&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "IN"
										},
										{
											"key": "currencyCode",
											"value": "INR"
										},
										{
											"key": "beneficiaryIdentityEntityType",
											"value": "individual"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Payment bank account meta data",
					"item": [
						{
							"name": "GET payout/meta",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/bank-accounts/4034221/payments/meta?amount=500&currency=USD&payerType=user&serviceLevel=standard",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"bank-accounts",
										"4034221",
										"payments",
										"meta"
									],
									"query": [
										{
											"key": "amount",
											"value": "500"
										},
										{
											"key": "currency",
											"value": "USD"
										},
										{
											"key": "payerType",
											"value": "user"
										},
										{
											"key": "serviceLevel",
											"value": "standard"
										}
									]
								},
								"description": "This returns information about valid purpose of payment codes."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Balances",
			"item": [
				{
					"name": "Get Balances",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Balances Fail: Wrong ManagedMerchantName",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/balances?managedMerchantName=XYZ",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"balances"
											],
											"query": [
												{
													"key": "managedMerchantName",
													"value": "XYZ"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Balances Fail: Wrong Currency",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/balances?currency=XYZ",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"balances"
											],
											"query": [
												{
													"key": "currency",
													"value": "XYZ"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get All Currency Balances",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/balances",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get EUR Balances",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/balances?currency=EUR",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									],
									"query": [
										{
											"key": "currency",
											"value": "EUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get USD Balances",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/balances?currency=USD",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									],
									"query": [
										{
											"key": "currency",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get GBP Balances",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/balances?currency=GBP",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"balances"
									],
									"query": [
										{
											"key": "currency",
											"value": "GBP"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4bd4c18c-8efb-47e7-86b5-6975ae3839b9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa7286b5-ab06-47c1-b3dd-eb903d2f9584",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Statements",
			"item": [
				{
					"name": "Get Statements",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Statements Fail: Wrong managedMerchantName",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/statements?managedMerchantName=test&startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"statements"
											],
											"query": [
												{
													"key": "managedMerchantName",
													"value": "test"
												},
												{
													"key": "startDateTime",
													"value": "2018-01-01T00:00:47Z"
												},
												{
													"key": "endDateTime",
													"value": "2018-10-01T00:00:47Z"
												},
												{
													"key": "currency",
													"value": "GBP"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Statements Fail: Invalid Currency",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=XYZ&sortOrder=DESC",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"statements"
											],
											"query": [
												{
													"key": "startDateTime",
													"value": "2018-01-01T00:00:47Z"
												},
												{
													"key": "endDateTime",
													"value": "2018-10-01T00:00:47Z"
												},
												{
													"key": "currency",
													"value": "XYZ"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Statements Fail: No currency",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&sortOrder=DESC",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"statements"
											],
											"query": [
												{
													"key": "startDateTime",
													"value": "2018-01-01T00:00:47Z"
												},
												{
													"key": "endDateTime",
													"value": "2018-10-01T00:00:47Z"
												},
												{
													"key": "currency",
													"value": "GBP",
													"disabled": true
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET Statements with no Transactions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=INR&sortOrder=DESC",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "INR"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements GBP",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC&offset=2&pageSize=10",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "offset",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements GBP with Pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC&offset=2&pageSize=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "offset",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements USD",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=USD&sortOrder=DESC",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "USD"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements EUR",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=EUR&sortOrder=DESC",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "EUR"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Statements GBP with Pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/statements?startDateTime=2018-01-01T00:00:47Z&endDateTime=2018-10-01T00:00:47Z&currency=GBP&sortOrder=DESC&offset=2&pageSize=3",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"statements"
									],
									"query": [
										{
											"key": "startDateTime",
											"value": "2018-01-01T00:00:47Z"
										},
										{
											"key": "endDateTime",
											"value": "2018-10-01T00:00:47Z"
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "offset",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e16e999-6e0b-4a60-b507-0d8a9c528bbb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b8bbcd38-9b74-4414-9edc-83a9abb01cab",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Quotes",
			"item": [
				{
					"name": "Get Indicative Quotes",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Quotes Fail: buyAmount buyCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fc5259c-aade-44c3-bfea-1c95bf86c7b7",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes/indicative",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes",
												"indicative"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount sellCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9527ca70-df1f-4bf4-98e3-de39e41aced7",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes/indicative",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes",
												"indicative"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail:  buyAmount sellCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f4dd20f-352c-4b0a-ace4-109fe6e574c2",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes/indicative",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes",
												"indicative"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount buyCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d299882-9699-4d3b-9270-a75d56009f16",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/quotes/indicative",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"quotes",
												"indicative"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET Quotes sellAmount buyCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17fd536b-0cb4-48ca-8956-aac211065352",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"EUR\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/indicative",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"indicative"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Quotes buyAmount sellCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7e3b202-5b09-416b-97ca-73cb557429fa",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\",\n        \"usersBankID\": {\n            \"userID\": {\n                \"epUserID\": \"3430090150650\"\n            },\n            \"benBankID\": {\n                \"epBankID\": \"7429826\"\n            }\n        }\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/indicative",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"indicative"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Quotes",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "GET Quotes Fail: buyAmount buyCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4443c6ea-fb6f-4a02-94dd-dda90b0bf65d",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount sellCurrency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "776f3dd1-2fc2-44e1-aa5a-55f235ac5c32",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains fxTicketID\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
													"    ",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail:  buyAmount sellCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e42379a-a617-4f90-a0af-37568aba27a8",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount buyCurrency (Exchange in same currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00379fe8-0949-4490-82d4-6bcf32633ff1",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Fx quote between same currencies is not allowed');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: buyAmount sellCurrency (buyCurrency different than bank account currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "765ab95f-8f1f-435f-abb7-e55cca491b40",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Buy currency specified must be same as beneficiary bank account currency');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"EUR\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Quotes Fail: sellAmount buyCurrency (buyCurrency different than bank account currency)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5739616a-6869-4fdb-915a-41354e8c23f7",
												"exec": [
													"pm.test(\"Successful 400 Bad Request Error\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response contains correct error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"longMsg\");",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var longMsg = jsonData.longMsg;",
													"    ",
													"    console.log('longMsg=='+longMsg);",
													"    ",
													"    pm.expect(longMsg).to.equal('Buy currency specified must be same as beneficiary bank account currency');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"//Clear down global variable",
													"pm.globals.unset(\"current_time_in_ms\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\"\n}\n"
										},
										"url": {
											"raw": "https://{{host}}/v1/users/3430090150650/bank-accounts/7429826/quotes",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"users",
												"3430090150650",
												"bank-accounts",
												"7429826",
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GET Quotes sellAmount buyCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45348f58-4548-4104-a19f-e96b78486749",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"EUR\",\n            \"amount\": 1200\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890151126/bank-accounts/4138896/quotes",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890151126",
										"bank-accounts",
										"4138896",
										"quotes"
									],
									"query": [
										{
											"key": "idType",
											"value": "merchant",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Quotes buyAmount sellCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "171bf679-5697-4765-8ca2-9d6da35456a7",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\"\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890146942/bank-accounts/4034215/quotes",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890146942",
										"bank-accounts",
										"4034215",
										"quotes"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Bulk Quotes",
					"item": [
						{
							"name": "GET bulkQuotes Single",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a2040e0-8939-474a-8b71-786db2a46951",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"sellCurrency\":\"EUR\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n}\r\n]"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/bulk",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET bulkQuotes Multiple",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39051ad6-5e03-417c-a61e-15dcdca4cee1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"sellCurrency\":\"EUR\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n},\r\n{\r\n\"sellCurrency\":\"USD\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n},\r\n{\r\n\"sellCurrency\":\"AUD\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n}\r\n]"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/bulk",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET bulkQuotes same currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5277cb35-211e-45b8-889f-11d885149511",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"sellCurrency\":\"GBP\",\r\n\"buyCountry\":\"GB\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n}\r\n]"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/bulk",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET bulkQuotes Fail: Wrong country-currency combination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "899cabf2-74eb-4a56-90d9-55b36b93827c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"sellCurrency\":\"EUR\",\r\n\"buyCountry\":\"FR\",\r\n\"buyCurrency\":\"GBP\",\r\n\"serviceLevel\":\"standard\"\r\n}\r\n]"
								},
								"url": {
									"raw": "https://{{host}}/v1/quotes/bulk",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"quotes",
										"bulk"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6d3aa72-772d-4235-a137-7110c7946d4f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f4c2e713-4a90-4457-9191-785db2ef1683",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Quotes [examples]",
					"item": [
						{
							"name": "Step 1. GET FX Quote [sellAmount]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76db2781-ae3e-4d6e-bdb9-1925bfc5c0dd",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"bodyData = JSON.parse(responseBody);",
											"",
											"//store fxTicketID data",
											"fxTicketID = bodyData.fxTicketID;",
											"",
											"//store sellAmount data",
											"sellAmount = bodyData.fxDetail.sellAmount;",
											"currency = sellAmount.currency,",
											"amount = sellAmount.amount;",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"});",
											"",
											"//set variables",
											"pm.environment.set(\"fxTicketID\", fxTicketID);",
											"pm.environment.set(\"sellCurrency\", currency);",
											"pm.environment.set(\"sellAmount\", amount);",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"sellAmount\": {\n            \"currency\": \"EUR\",\n            \"amount\": 1000\n        },\n        \"buyCurrency\": \"GBP\",\n        \"serviceLevel\": \"standard\"\n\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890151126/bank-accounts/4138896/quotes",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890151126",
										"bank-accounts",
										"4138896",
										"quotes"
									],
									"query": [
										{
											"key": "idType",
											"value": "merchant",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 1. GET FX Quote [buyAmount]",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bbe23f87-de47-4947-af0c-7c0f2187ba99",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"bodyData = JSON.parse(responseBody);",
											"",
											"//store fxTicketID data",
											"fxTicketID = bodyData.fxTicketID;",
											"",
											"//store sellAmount data",
											"sellAmount = bodyData.fxDetail.sellAmount;",
											"currency = sellAmount.currency,",
											"amount = sellAmount.amount;",
											"",
											"pm.test(\"Response contains fxTicketID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fxTicketID\");",
											"});",
											"",
											"//set variables",
											"pm.environment.set(\"fxTicketID\", fxTicketID);",
											"pm.environment.set(\"sellCurrency\", currency);",
											"pm.environment.set(\"sellAmount\", amount);",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"buyAmount\": {\n            \"currency\": \"GBP\",\n            \"amount\": 1000\n        },\n        \"sellCurrency\": \"EUR\",\n        \"serviceLevel\": \"standard\"\n}\n"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890151126/bank-accounts/4138896/quotes",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890151126",
										"bank-accounts",
										"4138896",
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2. Post Payments w/ FX Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "33869bbf-ef57-4c50-9454-cae4ed18ba0d",
										"exec": [
											"var milliseconds = new Date().getTime();",
											"pm.globals.set(\"current_time_in_ms\", milliseconds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "83c29c60-a897-4bf2-bcab-1ab4a2555817",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response contains merchantTransactionID\", function () {",
											"    var expected_merchant_tx_id = \"txID_\" + pm.globals.get(\"current_time_in_ms\");",
											"    var jsonData = pm.response.json();",
											"    var merchantTransactionID=jsonData.transactionID.merchantTransactionID;",
											"    console.log('merchantTransactionID=='+merchantTransactionID);",
											"",
											"    pm.expect(merchantTransactionID).to.eql(expected_merchant_tx_id);",
											"});",
											"",
											"pm.test(\"Response contains Earthport generated transactionID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"epTransactionID\");",
											"    ",
											"    var jsonData = pm.response.json();",
											"    var epTransactionID = jsonData.transactionID.epTransactionID;",
											"    ",
											"    console.log('epTransactionID=='+epTransactionID);",
											"    ",
											"    //Earthport bank ID is numeric",
											"    var pattern = new RegExp(\"^[0-9]*$\");",
											"    var match = pattern.test(epTransactionID);",
											"    ",
											"    console.log('pattern.test(epTransactionID)=='+pattern.test(epTransactionID));",
											"    ",
											"    pm.expect(match).to.be.true;",
											"});",
											"",
											"//Clear down global variable",
											"pm.globals.unset(\"current_time_in_ms\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"transactionID\": {\r\n\t\t\"merchantTransactionID\": \"txID_{{current_time_in_ms}}\"\r\n\t},\r\n\t\"payoutRequestAmount\": {\r\n\t\t\"currency\": \"{{sellCurrency}}\",\r\n\t\t\"amount\": {{sellAmount}}\r\n\t},\r\n\t\"fxTicketID\": {{fxTicketID}},\r\n\t\"payerType\": \"user\",\r\n\t\"beneficiaryStatementNarrative\": \"Free Text Description\"\r\n}"
								},
								"url": {
									"raw": "https://{{host}}/v1/users/3409890151126/bank-accounts/4138896/payments",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"users",
										"3409890151126",
										"bank-accounts",
										"4138896",
										"payments"
									]
								},
								"description": "This test assumes you have registered a GB/GBP beneficiary bank account which is being passed in the URL."
							},
							"response": []
						}
					],
					"description": "### Summary\n\nHere we've provided an example 'Quotes' collection that was put together as a visual aid, with the primary purpose of showing how payments are made using an FX ticketID - which was provided by a sell amount or buy amount quote. This should demonstrate the procedure of requesting a quote, to obtaining a FX ticketID, as well as the data that needs to be passed into the payment request body. \n\n\n### Getting Started\n\nNote: Please make sure you have Authenticated first. \n\n1. Start by selecting either 'sellAmount' or 'buyAmount', you can leave it how it is or you can input any amount of your choosing. You can change the currency code for the 'sellCurrency' if you wish, however the currency code must be GBP for 'buyCurrency' in order for this to work. This is because the sample bankID supplied within the URL is a beneficiary bank account that has been created for an GBP account. Should you choose to change the bankID to one you've created then the 'buyCurrency' will also need to change to the currency code of that bank account. \n\n2. Once you've sent the request, then 'ticketID', 'sellCurrency' and 'sellAmount' will be passed as a variable into the Payments request body. Open the 'Post Payments with FX' and send that request. This should automatically fill in the required fields for making payments using a ticketID. If you dive into the body for 'Post Payments' you'll see for example: {{fxTicketID}} , this is retrieving mandatory information from the quote request earlier.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "755ba87c-9ebf-4b8b-a970-ac5cd9c37b96",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c5bf5407-c2dc-41bd-94f0-f8cd19472c5a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Get Transaction Details",
					"item": [
						{
							"name": "Transaction Payout",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984607095",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984607095"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Returned Payout",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984546394",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984546394"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Refund",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984548632",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984548632"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction UserDeposit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984545951",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984545951"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Journal",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984607202",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984607202"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction LiquidityDeposit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984548614",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984548614"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Merchant Liquidity Movement",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474984548618",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474984548618"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0b3576e8-7c1c-49ac-a892-3d8f4a0f0191",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "800678dd-9cf8-44d3-bcc7-ed4f33e92208",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cancel a transaction",
					"item": [
						{
							"name": "CANCEL Transaction",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{host}}/v1/transactions/281474988434819?merchantCancellationReqID=12345",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions",
										"281474988434819"
									],
									"query": [
										{
											"key": "merchantCancellationReqID",
											"value": "12345"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Search transactions",
					"item": [
						{
							"name": "exception cases",
							"item": [
								{
									"name": "SEARCH Transaction Fail: Unknown managedMerchantName",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host}}/v1/transactions?managedMerchantName=123&currency=GBP&startDateTime=2018-01-01T07:36:28&endDateTime=2018-08-01T07:36:28&amountFrom=0&amountTo=50&sortOrder=DESC&sortFields=Timestamp,Amount&merchantTransactionID=txID_1532520105368&transactionType=Payout",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"v1",
												"transactions"
											],
											"query": [
												{
													"key": "managedMerchantName",
													"value": "123"
												},
												{
													"key": "currency",
													"value": "GBP"
												},
												{
													"key": "startDateTime",
													"value": "2018-01-01T07:36:28"
												},
												{
													"key": "endDateTime",
													"value": "2018-08-01T07:36:28"
												},
												{
													"key": "amountFrom",
													"value": "0"
												},
												{
													"key": "amountTo",
													"value": "50"
												},
												{
													"key": "sortOrder",
													"value": "DESC"
												},
												{
													"key": "sortFields",
													"value": "Timestamp,Amount"
												},
												{
													"key": "merchantTransactionID",
													"value": "txID_1532520105368"
												},
												{
													"key": "transactionType",
													"value": "Payout"
												},
												{
													"key": "transactionStatusCode",
													"value": "1",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "0",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "5",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "SEARCH Transaction",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions?currency=GBP&startDateTime=2018-12-01T07:36:28&endDateTime=2018-12-07T07:36:28&amountFrom=0&amountTo=5000&sortOrder=DESC&sortFields=Timestamp,Amount",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "managedMerchantName",
											"value": "",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "startDateTime",
											"value": "2018-12-01T07:36:28"
										},
										{
											"key": "endDateTime",
											"value": "2018-12-07T07:36:28"
										},
										{
											"key": "amountFrom",
											"value": "0"
										},
										{
											"key": "amountTo",
											"value": "5000"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "sortFields",
											"value": "Timestamp,Amount"
										},
										{
											"key": "merchantTransactionID",
											"value": "txID_1532520105368",
											"disabled": true
										},
										{
											"key": "transactionType",
											"value": "Payout",
											"disabled": true
										},
										{
											"key": "transactionStatusCode",
											"value": "1",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SEARCH Transaction with pagination",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/transactions?currency=GBP&startDateTime=2018-01-01T07:36:28&endDateTime=2018-08-01T07:36:28&amountFrom=0&amountTo=50&sortOrder=DESC&sortFields=Timestamp,Amount&merchantTransactionID=txID_1532520105368&transactionType=Payout&offset=0&pageSize=5",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"transactions"
									],
									"query": [
										{
											"key": "managedMerchantName",
											"value": null,
											"disabled": true
										},
										{
											"key": "currency",
											"value": "GBP"
										},
										{
											"key": "startDateTime",
											"value": "2018-01-01T07:36:28"
										},
										{
											"key": "endDateTime",
											"value": "2018-08-01T07:36:28"
										},
										{
											"key": "amountFrom",
											"value": "0"
										},
										{
											"key": "amountTo",
											"value": "50"
										},
										{
											"key": "sortOrder",
											"value": "DESC"
										},
										{
											"key": "sortFields",
											"value": "Timestamp,Amount"
										},
										{
											"key": "merchantTransactionID",
											"value": "txID_1532520105368"
										},
										{
											"key": "transactionType",
											"value": "Payout"
										},
										{
											"key": "transactionStatusCode",
											"value": "1",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Settlement Calendars",
			"item": [
				{
					"name": "Get Settlement Calendars",
					"item": [
						{
							"name": "GET Settlement Calendars",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/v1/settlement-calendars?serviceLevel=standard&beneficiaryCountry=FR&beneficiaryCurrency=EUR&payoutRequestCurrency=GBP&numberOfCalendarDays=1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"v1",
										"settlement-calendars"
									],
									"query": [
										{
											"key": "serviceLevel",
											"value": "standard"
										},
										{
											"key": "beneficiaryCountry",
											"value": "FR"
										},
										{
											"key": "beneficiaryCurrency",
											"value": "EUR"
										},
										{
											"key": "payoutRequestCurrency",
											"value": "GBP"
										},
										{
											"key": "numberOfCalendarDays",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4db0e9cd-2586-42f1-b7c8-df37777d54b9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "44955c08-8085-4e02-9f03-741aeaa2e2d2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "62d9a07b-a033-4704-a1c0-836f546a9001",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f98608d8-e49c-4441-bb73-6168123d3824",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}